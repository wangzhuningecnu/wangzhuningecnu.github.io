<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>年轻人不要老熬夜</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-26T15:47:12.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangzhuning</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>廖雪峰Python基础</title>
    <link href="http://yoursite.com/2017/12/21/LiaoXueFeng-Python/"/>
    <id>http://yoursite.com/2017/12/21/LiaoXueFeng-Python/</id>
    <published>2017-12-21T15:37:56.000Z</published>
    <updated>2017-12-26T15:47:12.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>原文地址：<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">中文，免费，零起点，完整示例，基于最新的Python 3版本。</a></p></blockquote><p>from：<a href="https://mp.weixin.qq.com/s?__biz=MzU3ODAxNDcwNQ==&amp;mid=2247484089&amp;idx=1&amp;sn=67c1a5c35a5e63dfb3c89899154993e8&amp;chksm=fd7a9e27ca0d1731c4e95b48db4344d116830324aa6dd01f7ad256c21c1e1525c55593ba8fd6&amp;scene=38#wechat_redirect" target="_blank" rel="external">马超</a></p><ol><li>廖雪峰的 Python 教程，不懂得地方再查资料去补充。</li><li>找一个实际的项目去练手。写一个爬虫项目。</li><li>找到一个已经会 Python 的司机。让他给你指出一条路子，同时在遇到卡壳的地方就找他指点。</li><li>要学会看别人代码，查看官方文档。</li><li>其实只要你想学习，什么时候开始都不晚，不要担心这担心那，你只需要努力，剩下的交给时间，而你之所以没有变强，只因你还不够努力，要记得付出不亚于任何人的努力。</li></ol><h2 id="Python-简介"><a href="#Python-简介" class="headerlink" title="Python 简介"></a>Python 简介</h2><p>用Python可以做什么？可以做日常任务，比如自动备份你的MP3；可以做网站，很多著名的网站包括YouTube就是Python写的；可以做网络游戏的后台，很多在线游戏的后台都是Python开发的。总之就是能干很多很多事啦。</p><p>Python不能写操作系统，这个只能用C语言写；不能写手机应用，只能用Swift/Objective-C（针对iPhone）和Java（针对Android）；不能写3D游戏，最好用C或C++。</p><p>Python是著名的“龟叔”Guido van Rossum在1989年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。</p><p>最近10年最常用的10种编程语言的变化图（TIOBE排行榜）：</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/00138595453161126cc9f11f1d441b0934661239528fa55000/0" alt="tpci_trends"></p><p>总的来说，这几种编程语言各有千秋。C语言是可以用来编写操作系统的贴近硬件的语言，所以，C语言适合开发那些追求运行速度、充分发挥硬件性能的程序。<strong>而Python是用来编写应用程序的高级编程语言</strong>。</p><p>高级编程语言通常都会提供一个比较完善的基础代码库，让你能直接调用，比如，针对电子邮件协议的SMTP库，针对桌面环境的GUI库，在这些已有的代码库的基础上开发，一个电子邮件客户端几天就能开发出来。</p><p>Python就为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。</p><p>除了内置的库外，Python还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用。</p><p>许多大型网站就是用Python开发的，例如YouTube、<a href="http://instagram.com/" target="_blank" rel="external">Instagram</a>，还有国内的<a href="http://www.douban.com/" target="_blank" rel="external">豆瓣</a>。很多大公司，包括Google、Yahoo等，甚至<a href="http://www.nasa.gov/" target="_blank" rel="external">NASA</a>（美国航空航天局）都大量地使用Python。</p><p>那Python适合开发哪些类型的应用呢？</p><p>首选是网络应用，包括网站、后台服务等等；</p><p>其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等；</p><p>另外就是把其他语言开发的程序再包装起来，方便使用。</p><p>任何编程语言都有缺点，Python也不例外。优点说过了，那Python有哪些缺点呢？</p><p>第一个缺点就是运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。</p><p>第二个缺点就是代码不能加密。<strong>如果要发布你的Python程序，实际上就是发布源代码，这一点跟C语言不同，C语言不用发布源代码，只需要把编译后的机器码（也就是你在Windows上常见的xxx.exe文件）发布出去。要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去</strong>。</p><p>这个缺点仅限于你要编写的软件需要卖给别人挣钱的时候。好消息是目前的互联网时代，靠卖软件授权的商业模式越来越少了，靠网站和移动应用卖服务的模式越来越多了，后一种模式不需要把源码给别人。</p><p>当然，Python还有其他若干小缺点，请自行忽略，就不一一列举了。</p><h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><p>要开始学习Python编程，首先就得把Python安装到你的电脑里。安装后，你会得到Python解释器（就是负责运行Python程序的），一个命令行交互环境，还有一个简单的集成开发环境。</p><p>目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的。由于3.x版越来越普及，我们的教程将以最新的Python 3.6版本为基础。请确保你的电脑上安装的Python版本是最新的3.6.x，这样，你才能无痛学习这个教程。</p><h3 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h3><p>当我们编写Python代码时，我们得到的是一个包含Python代码的以<code>.py</code>为扩展名的文本文件。要运行代码，就需要Python解释器去执行<code>.py</code>文件。</p><p>Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法是通过网络调用来交互，确保各程序之间的独立性，而不是用Jython或IronPython。</p><p>当你在终端或者cmd里输入python3的时候, 就是启动了CPython解释器, 安装了Python会默认带一个IDLE, 该软件就是基于CPython做的一个IDE.</p><p>pycharm是一个IDE，类似Python自带的IDLE、Spyder、Sublime等等，它们都只是编辑器，是用来编写代码的，而CPython、IPython、PyPy等，这些是解释器，是用来执行Python代码的，这两者是不一样的。</p><h3 id="命令行模式和Python交互模式"><a href="#命令行模式和Python交互模式" class="headerlink" title="命令行模式和Python交互模式"></a>命令行模式和Python交互模式</h3><p>命令行模式：</p><p>在Windows开始菜单选择“命令提示符”，就进入到命令行模式，它的提示符类似<code>C:\&gt;</code>，</p><p>在命令行模式下，可以执行<code>python</code>进入Python交互式环境，也可以执行<code>python hello.py</code>运行一个<code>.py</code>文件。</p><p>执行一个<code>.py</code>文件<em>只能</em>在命令行模式执行。</p><p>Python交互模式：</p><p>在命令行模式下敲命令<code>python</code>，就看到类似如下的一堆文本输出，然后就进入到Python交互模式，它的提示符是<code>&gt;&gt;&gt;</code>。</p><p>在Python交互模式下输入<code>exit()</code>并回车，就退出了Python交互模式，并回到命令行模式。</p><p>Python交互模式的代码是输入一行，执行一行，而命令行模式下直接运行<code>.py</code>文件是一次性执行该文件内的所有代码。可见，Python交互模式主要是为了调试Python代码用的，也便于初学者学习，它<em>不是</em>正式运行Python代码的环境！</p><h3 id="使用文本编辑器"><a href="#使用文本编辑器" class="headerlink" title="使用文本编辑器"></a>使用文本编辑器</h3><p>py文件名只能是英文字母、数字和下划线的组合。</p><p>用Python开发程序，完全可以一边在文本编辑器里写代码，一边开一个交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！前提是得有个27’的超大显示器！</p><h3 id="Python代码运行助手"><a href="#Python代码运行助手" class="headerlink" title="Python代码运行助手"></a>Python代码运行助手</h3><p>Python代码运行助手可以让你在线输入Python代码，然后通过本机运行的一个Python脚本来执行代码。原理如下：</p><ul><li><p>在网页输入代码;</p></li><li><p>点击<code>Run</code>按钮，代码被发送到本机正在运行的Python代码运行助手；</p></li><li><p>Python代码运行助手将代码保存为临时文件，然后调用Python解释器执行代码；</p></li><li><p>网页显示代码执行结果。</p><p>下载地址：<a href="https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fpython" target="_blank" rel="external">learning.py</a></p><p>运行：</p><p>在存放<code>learning.py</code>的目录下运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Users\michael\Downloads&gt; python3 learning.py</div></pre></td></tr></table></figure><p>如果看到<code>Ready for Python code on port 39093...</code>表示运行成功，不要关闭命令行窗口，最小化放到后台运行即可。</p></li></ul><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。<code>print()</code>遇到逗号“,”会输出一个空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'The quick brown fox'</span>, <span class="string">'jumps over'</span>, <span class="string">'the lazy dog'</span>)</div><div class="line">The quick brown fox jumps over the lazy dog</div></pre></td></tr></table></figure><p><code>print()</code>也可以打印整数，或者计算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'100 + 200 ='</span>, <span class="number">100</span> + <span class="number">200</span>)</div><div class="line"><span class="number">100</span> + <span class="number">200</span> = <span class="number">300</span></div></pre></td></tr></table></figure><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>Python提供了一个<code>input()</code>，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：输入和输出</p><p>阅读: 920559</p><hr><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出<code>&#39;hello, world&#39;</code>，用代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print(&apos;hello, world&apos;)</div></pre></td></tr></table></figure><p><code>print()</code>函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print(&apos;The quick brown fox&apos;, &apos;jumps over&apos;, &apos;the lazy dog&apos;)</div><div class="line">The quick brown fox jumps over the lazy dog</div></pre></td></tr></table></figure><p><code>print()</code>会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的：</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001431643506965540b8016b45c4d27b84c734543f78840000/l" alt="print-explain"></p><p><code>print()</code>也可以打印整数，或者计算结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print(300)</div><div class="line">300</div><div class="line">&gt;&gt;&gt; print(100 + 200)</div><div class="line">300</div></pre></td></tr></table></figure><p>因此，我们可以把计算<code>100 + 200</code>的结果打印得更漂亮一点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print(&apos;100 + 200 =&apos;, 100 + 200)</div><div class="line">100 + 200 = 300</div></pre></td></tr></table></figure><p>注意，对于<code>100 + 200</code>，Python解释器自动计算出结果<code>300</code>，但是，<code>&#39;100 + 200 =&#39;</code>是字符串而非数学公式，Python把它视为字符串，请自行解释上述打印结果。</p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>现在，你已经可以用<code>print()</code>输出你想要的结果了。但是，如果要让用户从电脑输入一些字符怎么办？Python提供了一个<code>input()</code>，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = input()</div><div class="line">Michael</div></pre></td></tr></table></figure><p>输入完成后，不会有任何提示，Python交互式命令行又回到<code>&gt;&gt;&gt;</code>状态了。那我们刚才输入的内容到哪去了？答案是存放到<code>name</code>变量里了。可以直接输入<code>name</code>查看变量内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name</div><div class="line"><span class="string">'Michael'</span></div></pre></td></tr></table></figure><p>要打印出<code>name</code>变量的内容，除了直接写<code>name</code>然后按回车外，还可以用<code>print()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</div><div class="line">Michael</div></pre></td></tr></table></figure><p><code>input()</code>可以让你显示一个字符串来提示用户，于是我们把代码改成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name = input(<span class="string">'please enter your name: '</span>)</div><div class="line">print(<span class="string">'hello,'</span>, name)</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C:\Workspace&gt; python hello.py</div><div class="line">please enter your name: Michael</div><div class="line">hello, Michael</div></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>Python 是解释型语言</li><li>pycharm是一个IDE，类似Python自带的IDLE、Spyder、Sublime等等，它们都只是编辑器，是用来编写代码的，而CPython、IPython、PyPy等，这些是解释器，是用来执行Python代码的</li><li>输入是Input，输出是Output，因此，我们把输入输出统称为Input/Output，或者简写为IO。</li><li><code>input()</code>和<code>print()</code>是在命令行下面最基本的输入和输出，但是，用户也可以通过其他更高级的图形界面完成输入和输出，比如，在网页上的一个文本框输入自己的名字，点击“确定”后在网页上看到输出信息。</li><li><code>input()</code>可以让你显示一个字符串来提示用户，name = input(‘please enter your name: ‘)</li><li>print()`会依次打印每个字符串，遇到逗号“,”会输出一个空格，print(‘hello,’, name)</li></ol><h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot; target=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git 原理详解及实用指南</title>
    <link href="http://yoursite.com/2017/12/18/Juejin-Git-renwuxian/"/>
    <id>http://yoursite.com/2017/12/18/Juejin-Git-renwuxian/</id>
    <published>2017-12-18T12:49:32.000Z</published>
    <updated>2017-12-19T00:57:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是版本控制系统？"><a href="#1-什么是版本控制系统？" class="headerlink" title="1. 什么是版本控制系统？"></a>1. 什么是版本控制系统？</h2><h3 id="版本控制：最基本功能"><a href="#版本控制：最基本功能" class="headerlink" title="版本控制：最基本功能"></a>版本控制：最基本功能</h3><p>版本控制系统（Version Control System - VCS）最基本的功能是<strong>版本控制</strong>。所谓版本控制，就是在文件的修改历程中保留修改历史，让你可以方便地撤销之前对文件的修改操作。如 「撤销（Undo）」功能。当你按下「撤销」的时候，它就帮你把内容回退到上一个状态；同理，按一次是会退到上一个版本，按两次就是回退到上上一个版本。</p><p>写程序的时候同样也难免会遇到「写错」的情况，所以程序的 VCS，当然也会需要版本控制功能，这样当你发现「昨天有一行代码写错了」，你就不用凭着记忆把那段代码背出来，而只需要在 VCS 中选择撤回到昨天的那个版本。</p><h3 id="主动提交：程序代码和普通文本的区别"><a href="#主动提交：程序代码和普通文本的区别" class="headerlink" title="主动提交：程序代码和普通文本的区别"></a>主动提交：程序代码和普通文本的区别</h3><p>程序代码的修改的生命周期非常长。一次代码的修改，在几天后、几个月后、几年后都有可能需要被翻出来。如果依然采用「每次改动自动保存」的形式来保留修改历史，将会导致改动历史非常频繁和无章可循，这样，<strong>历史代码的查找、阅读和回退就会很困难了</strong>。所以，和文本编辑器的撤销功能不同，VCS 保存修改历史，使用的是主动提交改动的机制。</p><p>在你写了一段完整的代码（例如修复了一个 bug）之后，使用 commit 命令把改动和对改动的描述信息提交，这次改动就被记录到版本历史中了。之后如果你希望回退到这个版本，就可以从 VCS 的<strong>历史日志</strong>中方便地找到它。</p><h3 id="多人合作的同步需求：中央仓库"><a href="#多人合作的同步需求：中央仓库" class="headerlink" title="多人合作的同步需求：中央仓库"></a>多人合作的同步需求：中央仓库</h3><p>代码可以一个人写，但更多的时候会是多个人共同开发。那么自然地，就需要有一个中央仓库作为代码的存储中心：所有人的改动都会上传到这里，所有人都能也都能看到和下载到别人上传的改动。</p><p>这样，解决了同步的需求，多个人在不同的机器上开发同一个程序就成了可能。</p><p><strong>版本控制、主动提交、中央仓库这三个要素，共同构成了版本控制系统（VCS）的核心</strong>：开发团队中的每个人向中央仓库主动提交自己的改动和同步别人的改动，并在需要的时候查看和操作历史版本，这就是<strong><em>版本控制系统</em></strong>.</p><h3 id="中央式版本控制系统"><a href="#中央式版本控制系统" class="headerlink" title="中央式版本控制系统"></a>中央式版本控制系统</h3><p>最初的版本控制系统，是中央式版本控制系统（Centralized VCS），也就是前面我讲的这种。Git 是分布式的版本控制系统（Distributed VCS），现在先说一下中央式版本控制系统的工作模型。</p><p>工作模型：</p><p>假设你在一个三人团队，你们计划开发一个软件或者系统，并决定使用中央式 VCS 来管理代码。于是：</p><ol><li>作为项目的主工程师，你独自一人花两天时间搭建了项目的框架；</li><li>然后，你在公司的服务器（这个服务器可以是公司内的设备，也可以是你们买的云服务）上创建了一个中央仓库，并把你的代码提交到了中央仓库上；</li><li>你的两个队友从中央仓库取到了你的初始代码，从此刻开始，你们三人开始并行开发；</li><li>在之后的开发过程中，你们三人为了工作方便，总是每人独立负责开发一个功能，在这个功能开发完成后，这个人就把他的这些新代码提交到中央仓库；</li><li>每次当有人把代码提交到中央仓库的时候，另外两个人就可以选择把这些代码同步到自己的机器上，保持自己的本地代码总是最新的。</li></ol><p>而对于团队中的每个人来说，就会更简单一点：</p><ol><li>第一次加入团队时，把中央仓库的代码取下来；</li><li>写完的新功能提交到中央仓库；</li><li>同事提交到中央仓库的新代码，及时同步下来。</li></ol><p>这样，一个三人的团队就成功做到了各自在自己的电脑上开发同一个项目，并且互不影响，就好像你们三个人是在同一台电脑上操作一样。</p><p>这就是中央式 VCS 最基本的工作模型。当然，实际的开发工作并没有简单到这种程度，因为你时常会需要处理代码冲突、查看版本历史、回退代码版本等；另外，Git 属于分布式 VCS，它的概念也比中央式 VCS 要复杂一些。</p><p>中央式 VCS 的中央仓库有两个主要功能：保存版本历史、同步团队代码。</p><h2 id="2-什么是分布式版本控制系统（DVCS）？"><a href="#2-什么是分布式版本控制系统（DVCS）？" class="headerlink" title="2. 什么是分布式版本控制系统（DVCS）？"></a>2. 什么是分布式版本控制系统（DVCS）？</h2><p>分布式 VCS （Distributed VCS / DVCS）和中央式的区别在于，<strong>分布式 VCS 除了中央仓库之外，还有本地仓库</strong>：团队中每一个成员的机器上都有一份本地仓库，这个仓库里包含了所有的版本历史，或者换句话说，每个人在自己的机器上就可以提交代码、查看历史，而无需联网和中央仓库交互——当然，取而代之的，你需要和本地仓库交互。</p><p>中央式 VCS 的中央仓库有两个主要功能：保存版本历史、同步团队代码。而在分布式 VCS 中，保存版本历史的工作转交到了每个团队成员的本地仓库中，中央仓库就只剩下了同步团队代码这一个主要任务。它的中央仓库依然也保存了历史版本，但这份历史版本更多的是作为团队间的同步中转站。</p><p>工作模型：</p><p>依然以三人团队为例，分布式 VCS 的工作模型大致是这样：</p><ol><li>首先，你作为主工程师，独立搭建了项目架构，并把这些代码提交到了本地仓库；</li><li>然后，你在服务器上创建了一个中央仓库，并把 1 中的提交从本地仓库推送到了服务器的中央仓库；</li><li>其他同事把中央仓库的所有内容克隆到本地，拥有了各自的本地仓库，从此刻开始，你们三人开始并行开发；</li><li>在之后的开发过程中，你们三人总是每人独立负责开发一个功能，在这个功能开发过程中，一个人会把它的每一步改动提交到本地仓库。注意：由于本地提交无需立即上传到中央仓库，所以每一步提交不必是一个完整功能，而可以是功能中的一个步骤或块。</li><li>在一个人把某个功能开发完成之后，他就可以把这个功能相关的所有提交从本地仓库推送到中央仓库；</li><li>每次当有人把新的提交推送到中央仓库的时候，另外两个人就可以选择把这些提交同步到自己的机器上，并把它们和自己的本地代码合并。</li></ol><p>可以看出，这个工作模型和上一节讲的「中央式 VCS 的工作模型」很相似，只是把代码的提交和上传过程拆开了。</p><p>另外，和上节讲的中央式 VCS 工作模型一样，这个也只是分布式 VCS 的一个最基本的工作模型，实际的开发工作会比这个麻烦和复杂。</p><h2 id="3-快速上手-Git"><a href="#3-快速上手-Git" class="headerlink" title="3. 快速上手 Git"></a>3. 快速上手 Git</h2><p>点击右上角的「New Repository」来新建远程仓库；</p><p>进入仓库设置页面填写信息：仓库名会被 GitHub 设置为你的仓库的根目录的名称，<code>.gitignore</code> 是 Git 仓库中的一个特殊的文本文件，它里面记录了你不希望提交到仓库的目录和文件的名称或类型，例如你的 <code>/build</code> 目录，然后完成远程仓库的创建。</p><p>点击右边的「Clone or download」，然后把仓库的 <code>clone</code> 地址复制到剪贴板。接下来就可以把远程仓库取下来了。取的方式很简单：在 Terminal 或 cmd 中切换到你希望放置项目的目录中，然后输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone 你刚复制的地址</div></pre></td></tr></table></figure><p>Git 就会把你的远程仓库 clone 到本地。你会看到你的当前目录下多了一个新的子目录，它的名字和刚才新建的 GitHub 仓库名一致：进入这个目录，你会发现这里除了你刚才添加的 <code>LICENSE</code> 和 <code>.gitignore</code> 文件外，还有一个叫做 <code>.git</code> 的隐藏目录。这个 .git 目录，就是你的本地仓库（Local Repository），你的所有版本信息都会存在这里。而 .git 所在的这个根目录，称为 Git 的工作目录（Working Directory），它保存了你当前从仓库中签出（checkout）的内容。现在你在项目的目录下输入：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-什么是版本控制系统？&quot;&gt;&lt;a href=&quot;#1-什么是版本控制系统？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是版本控制系统？&quot;&gt;&lt;/a&gt;1. 什么是版本控制系统？&lt;/h2&gt;&lt;h3 id=&quot;版本控制：最基本功能&quot;&gt;&lt;a href=&quot;#版
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>李旭口语</title>
    <link href="http://yoursite.com/2017/11/26/Pronunciation-of-Miss-Li/"/>
    <id>http://yoursite.com/2017/11/26/Pronunciation-of-Miss-Li/</id>
    <published>2017-11-26T13:33:16.000Z</published>
    <updated>2017-11-26T14:57:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="音标"><a href="#音标" class="headerlink" title="音标"></a>音标</h2><p>元音 = 韵母，口型固定，气流喷出</p><p>辅音 = 声母，受嘴唇、舌头、牙齿结合</p><p>发音就是 单独的元音 或 辅音 + 元音</p><p>元音分为：前元音、中元音、后元音。（单元音，双元音只是分类方法不同，意义一样）</p><h3 id="前元音"><a href="#前元音" class="headerlink" title="前元音"></a>前元音</h3><p>【 i 】：很短促的叫人：衣（诶）   ship shit me <strong>i</strong>、<strong>y结尾</strong> 发这个【 i 】音，pig,many。y在词首部读【j】</p><p>【 i :】：等于【i】到【j】（夜）滑动的音（一夜） sheep sheet <strong>ee</strong>、<strong>ea</strong> 发这个【 i :】音</p><p>【 e 】：小口型的林黛玉式的 哎 bed best said。<strong>e</strong> 、<strong>ea</strong>、<strong>ai</strong> 发这个音</p><p>【 æ 】：大口型的 ╮(╯▽╰)╭哎  bad apple ，<strong>a</strong> 发这个音</p><h2 id="美式发音和英式发言"><a href="#美式发音和英式发言" class="headerlink" title="美式发音和英式发言"></a>美式发音和英式发言</h2><h2 id="连读规则"><a href="#连读规则" class="headerlink" title="连读规则"></a>连读规则</h2><h2 id="重音"><a href="#重音" class="headerlink" title="重音"></a>重音</h2><h2 id="语调"><a href="#语调" class="headerlink" title="语调"></a>语调</h2><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h2 id="考试口语"><a href="#考试口语" class="headerlink" title="考试口语"></a>考试口语</h2><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;音标&quot;&gt;&lt;a href=&quot;#音标&quot; class=&quot;headerlink&quot; title=&quot;音标&quot;&gt;&lt;/a&gt;音标&lt;/h2&gt;&lt;p&gt;元音 = 韵母，口型固定，气流喷出&lt;/p&gt;
&lt;p&gt;辅音 = 声母，受嘴唇、舌头、牙齿结合&lt;/p&gt;
&lt;p&gt;发音就是 单独的元音 或 辅音 + 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Teacher Li&#39;s 大学英语六级听力之“连读”</title>
    <link href="http://yoursite.com/2017/11/17/Teacher-Li-s-%E5%A4%A7%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7%E5%90%AC%E5%8A%9B%E4%B9%8B%E2%80%9C%E8%BF%9E%E8%AF%BB%E2%80%9D/"/>
    <id>http://yoursite.com/2017/11/17/Teacher-Li-s-大学英语六级听力之“连读”/</id>
    <published>2017-11-17T14:33:41.000Z</published>
    <updated>2017-11-21T15:35:17.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>链接：<a href="http://v.koolearn.com/20150923/2534.html" target="_blank" rel="external">视频：大学英语六级听力之“连读”</a></p><h2 id="辅音-辅音"><a href="#辅音-辅音" class="headerlink" title="辅音 + 辅音"></a>辅音 + 辅音</h2><h3 id="失去爆破："><a href="#失去爆破：" class="headerlink" title="失去爆破："></a>失去爆破：</h3><p>前面一个音节以辅音结尾，通常是 p 、 k 、 t、b 、g 、d，且后面一个音节以不同的辅音开头，在一起时，要失爆。第一个辅音只做口型，不读出声音。听力中有停顿，说明可能是失去爆破。</p><p>blac<strong><em>kb</em></strong>oard</p><p>brea<strong><em>kf</em></strong>ast</p><p>si<strong><em>t d</em></strong>own</p><p>ho<strong><em>t d</em></strong>ay</p><p>goo<strong><em>d t</em></strong>eacher</p><p>ba<strong><em>d b</em></strong>oy</p><p>coul<strong><em>d b</em></strong>e</p><p>put i<strong><em>t d</em></strong>own  t 和 d 是两个辅音，</p><p>put i<strong><em>t d</em></strong>own（注意，t 后面跟一个元音时，u 不发 ʌ 音，发 ə 音）</p><h3 id="击穿"><a href="#击穿" class="headerlink" title="击穿"></a>击穿</h3><p>针对于 h，它放词首，且不是重读音节，则不做口型，不出气，即不发音。飘出来的 「和」，除非你想强调，要读出来。</p><p>i li<strong><em>ke he</em></strong>r</p><p>i<strong><em>n hi</em></strong>s car</p><p>as<strong><em>k hi</em></strong>m</p><h3 id="叠合"><a href="#叠合" class="headerlink" title="叠合"></a>叠合</h3><p>前面结尾的辅音和后面开头的辅音一样，且不是重读音节，就是叠合现象，这时，只读其中的一个发音。除非你想强调，要读出来。</p><p>a ba<strong><em>d d</em></strong>og</p><p>goo<strong><em>d d</em></strong>ay</p><p>ta<strong><em>ke c</em></strong>are  ( 注意这个发音和 take air 一样)</p><p>i li<strong><em>ke c</em></strong>andy</p><p> a ta<strong><em>me m</em></strong>onkey</p><p>boo<strong><em>k c</em></strong>ase</p><p>a bi<strong><em>g g</em></strong>ame</p><h2 id="辅音-元音-（最常见）"><a href="#辅音-元音-（最常见）" class="headerlink" title="辅音 + 元音 （最常见）"></a>辅音 + 元音 （最常见）</h2><p>前一个音节的结尾辅音，跟后一个音节的开头元音，连在一起拼读。</p><p>knoc<strong><em>k a</em></strong>t</p><p>loo<strong><em>k i</em></strong>nto</p><p>loo<strong><em>k o</em></strong>ut</p><p>ta<strong><em>ke u</em></strong>p</p><p>但是还有四个，前面结尾的要发音，后面的还要连读在一起：</p><h3 id="r-元音"><a href="#r-元音" class="headerlink" title="[ r ] + 元音"></a>[ r ] + 元音</h3><p>[ r ] 发言结尾，且后面是元音时，r （儿化音）要读出来，还要再跟后面的元音连读</p><p>You<strong><em>r a</em></strong>nswer are excellent.  当主语和系动词都要连时，连主语。</p><p>I have rea<strong><em>d y</em></strong>ou<strong><em>r a</em></strong>rticle.</p><p>fa<strong><em>r a</em></strong>way</p><p>fo<strong><em>r i</em></strong>nstance</p><p>a numbe<strong><em>r o</em></strong>f</p><h3 id="【-l-】-元音"><a href="#【-l-】-元音" class="headerlink" title="【 l 】+ 元音"></a>【 l 】+ 元音</h3><p>[ l ] 发二分之一的了音，以下单词发这个音：l、ll、le</p><p>[ l ] 发言结尾，且后面是元音时，要跟后面的元音连读。</p><p>coup<strong><em>le o</em></strong>f</p><p>doub<strong><em>le o</em></strong>f</p><p><strong><em>LE</em></strong>D</p><p><strong><em>Li</em></strong> 读成 Llai 的音</p><p>LEE L doub<strong><em>le e</em></strong></p><p>i wil<strong><em>l a</em></strong>s<strong><em>k hi</em></strong>m later</p><p>007: doub<strong><em>le O</em></strong> seven</p><h3 id="【-n-】-元音"><a href="#【-n-】-元音" class="headerlink" title="【 n 】+ 元音"></a>【 n 】+ 元音</h3><p>[ n ] 发言结尾，且后面是元音时，要跟后面的元音连读。</p><p>a<strong><em>n a</em></strong>pple  必然连读，否则是错的，除非特殊强调。</p><p>a<strong><em>n a</em></strong>nswer</p><p>a<strong><em>n a</em></strong>rticle</p><p>i<strong><em>n a</em></strong> hotel</p><p>a<strong><em>n o</em></strong>ld lady</p><p>pe<strong><em>n a</em></strong>nd paper</p><p>i<strong><em>n an i</em></strong>nstant （发生两次连读，第一次是n + a,第二次是 n+i）</p><p>ope<strong><em>n an a</em></strong>ccount  (发生两次连读，第一次是n + a,第二次是 n+a）</p><p>1980： ninetee<strong><em>n e</em></strong>igthy</p><h3 id="【-t-】-元音"><a href="#【-t-】-元音" class="headerlink" title="【 t 】+ 元音"></a>【 t 】+ 元音</h3><p>[ t ] + 元音，则变成介于 t 与 d 之间的弹射音</p><p>ci<strong><em>ty</em></strong></p><p>美国人发生音变有3个规则：</p><ol><li>[ t ] 音在音节的中间</li><li>[ t ] 音前面是一个元音</li><li>[ t ] 音不是重读音</li></ol><p>ge<strong><em>t i</em></strong>n</p><p>ge<strong><em>t o</em></strong>ut</p><p>so i<strong><em>t i</em></strong>s</p><p>ge<strong><em>t i</em></strong>n</p><p>ge<strong><em>t i</em></strong>t ou<strong><em>t o</em></strong>f here</p><p>pu<strong><em>t i</em></strong>t off</p><p>take i<strong><em>t e</em></strong>asy</p><p>no<strong><em>t a</em></strong>t all</p><p>keep i<strong><em>t u</em></strong>p</p><p>no<strong><em>t a</em></strong>lone</p><h2 id="元音-元音"><a href="#元音-元音" class="headerlink" title="元音 + 元音"></a>元音 + 元音</h2><h3 id="加半元音【w】"><a href="#加半元音【w】" class="headerlink" title="加半元音【w】"></a>加半元音【w】</h3><p>当前面单词以 <strong>[əu]</strong>、<strong>[ɑu]</strong>、<strong>[u]</strong>、<strong>[u:]</strong>结尾，后面单词以元音开头，在一起连读时，要加半元音【w】,感觉像【温】音</p><p>just d<strong><em>o i</em></strong>t</p><p>g<strong><em>o o</em></strong>n</p><p>n<strong><em>o e</em></strong>nd</p><p>d<strong><em>oi</em></strong>ng</p><p>g<strong><em>oi</em></strong>ng</p><p>wh<strong><em>o e</em></strong>lse</p><p>to<strong><em>o o</em></strong>ften</p><p>yo<strong><em>u a</em></strong>re</p><h3 id="加半元音【j】"><a href="#加半元音【j】" class="headerlink" title="加半元音【j】"></a>加半元音【j】</h3><p>当前面单词以 <strong>[ei]</strong>、<strong>[ɑi]</strong>、<strong>[ɔi]</strong>、<strong>[i]</strong>结尾，后面单词以元音开头，在一起连读时，要加半元音【j】,感觉像【耶】音</p><p>b<strong><em>e o</em></strong>n time</p><p>sa<strong><em>y i</em></strong>t</p><p>se<strong><em>e i</em></strong>t</p><p>sh<strong><em>e i</em></strong>s</p><p>tr<strong><em>y i</em></strong>t</p><p>ma<strong><em>y i</em></strong></p><p><strong><em>i a</em></strong>m</p><p>wei<strong><em>gh i<em>*</em></em></strong>t u<em>*</em>p (两次连读，第一次是加 【j】，第二次是t变d，连读u)</p><h2 id="连读音变"><a href="#连读音变" class="headerlink" title="连读音变"></a>连读音变</h2><ol><li>【t】 +【j】=【<strong>ʧ</strong>】</li></ol><p>why don’t you come here?</p><p>i want you</p><p>nice to meet you</p><ol><li>【d】+【j】=【<strong>ʤ</strong>】</li></ol><p>would you please…</p><p>could you please…</p><p>how did you get there..</p><ol><li>【s】+【j】=<strong>【ʃ】</strong></li></ol><p>i miss you</p><p>unless you know how to get there</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;链接：&lt;a href=&quot;http://v.koolearn.com/20150923/2534.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视频：大学英语六级听力之“连读”&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;辅
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Studio 使用</title>
    <link href="http://yoursite.com/2017/11/09/Android-Studio-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2017/11/09/Android-Studio-快捷键/</id>
    <published>2017-11-09T07:43:49.000Z</published>
    <updated>2017-11-17T04:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>上下移动代码：</p><p>OXS/Win/Linux : Alt + Shift + Up/Down</p><p>删除行：</p><p>OSX : Cmd + Delete</p><p>Win/Linux : Ctrl + Y</p><p>快捷向下复制行：</p><p>OSX : Cmd + D</p><p>Win/Linux : Ctrl + D</p><p>快捷覆写方法：</p><p>OSX : Ctrl + O</p><p>Win/Linux :</p><p>注释代码 ( // )：</p><p>OSX : Cmd + /</p><p>Win/Linux :</p><p>注释代码 ( /**/ )：</p><p>OSX : Cmd + Alt + /</p><p>Win/Linux :</p><p>格式化代码：</p><p>OSX : Cmd + Alt + L</p><p>Win/Linux :</p><p>快捷最近打开：</p><p>OSX : Cmd + E</p><p>Win/Linux : Ctrl + E</p><p>清除无效 import ：</p><p>OSX : Alt + Control + O</p><p>Win/Linux:Alt + Control + O</p><p>代码补全 :</p><p>OSX : Cmd + Shift + Enter</p><p>Win/Linux : Ctrl + Shift + Enter</p><p>提示错误解决方案 :</p><p>OSX : Alt + Enter</p><p>Win/Linux : Alt + Enter</p><p>提示参数类型 : </p><p>OSX : Cmd + P</p><p>Win/Linux : Ctrl + P</p><p>查找+替换 : </p><p>OSX : Cmd + R</p><p>Win/Linux : Ctrl + R</p><p>查找 : </p><p>OSX : Cmd + F</p><p>Win/Linux : Ctrl + F</p><h2 id="类注释自动生成说明"><a href="#类注释自动生成说明" class="headerlink" title="类注释自动生成说明"></a>类注释自动生成说明</h2><p>类注释：</p><p><img src="" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/gbE7Mf" alt=""></p><p>添加以下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 项目名：     $&#123;PROJECT_NAME&#125;</span></div><div class="line"><span class="comment"> * 包名：       $&#123;PACKAGE_NAME&#125; </span></div><div class="line"><span class="comment"> * 文件名：     $&#123;NAME&#125;</span></div><div class="line"><span class="comment"> * Created by $&#123;USER&#125; on $&#123;DATE&#125;.</span></div><div class="line"><span class="comment"> * 描述：     TODO </span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;&lt;p&gt;上下移动代码：&lt;/p&gt;
&lt;p&gt;OXS/Win/Linux : Alt + Shift + Up/
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Android Studio" scheme="http://yoursite.com/categories/Android/Android-Studio/"/>
    
    
  </entry>
  
  <entry>
    <title>英文词串 - 英语流利说</title>
    <link href="http://yoursite.com/2017/11/06/English-word-phrase/"/>
    <id>http://yoursite.com/2017/11/06/English-word-phrase/</id>
    <published>2017-11-06T15:19:08.000Z</published>
    <updated>2017-11-07T05:12:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="英语六级口语考试"><a href="#英语六级口语考试" class="headerlink" title="英语六级口语考试"></a>英语六级口语考试</h2><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><ol><li>语音一定要准（第一印象很重要）</li><li>语速不要过快或过慢（20秒，40-50词为最佳）</li><li>适当使用连续以增加语言的流畅度，有快有慢</li><li>不要面面俱到，找一两个方向，展开一两句即可</li><li>六级考生还要根据自己的自我介绍准备可能考官追问的问题</li><li>名字问题可以不说</li></ol><p>自我介绍部分思考方向：</p><ol><li>年龄，专业</li><li>大学介绍 i am from … university,she is a famous beatiful school name love in here.</li><li>性格特点</li><li>家庭背景</li><li>业余爱好</li><li>家乡景点</li></ol><p>百度搜 地名+英文介绍可以参考</p><p>自我介绍注意停顿和连读就更好一些，每一个发言一定要准确。</p><p>先写100词的自我介绍，再按照连读规则，把施爆的地方划掉，连读音变加上，语速增加、减缓画出来，读音注意的地方画上，背下来，录下来，听哪里不好再改</p><p>老师问问题，基于你自己所说的东西问，回答的时候，挑自己会说的回答，不一定是实话。</p><p>图片</p><blockquote><p>so, what do you say? </p></blockquote><p>巴拉巴拉说了一堆后，询问对方的意见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;英语六级口语考试&quot;&gt;&lt;a href=&quot;#英语六级口语考试&quot; class=&quot;headerlink&quot; title=&quot;英语六级口语考试&quot;&gt;&lt;/a&gt;英语六级口语考试&lt;/h2&gt;&lt;h3 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="英语" scheme="http://yoursite.com/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>带领新手快速开发 Android App</title>
    <link href="http://yoursite.com/2017/11/02/imooc-Quick-develop-Android-App/"/>
    <id>http://yoursite.com/2017/11/02/imooc-Quick-develop-Android-App/</id>
    <published>2017-11-02T12:55:12.000Z</published>
    <updated>2017-11-02T13:35:13.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>借助流行的第三方 SDK 及框架，开发“生活小助手 App ”。</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/EIjPeg" alt=""></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="登录注册"><a href="#登录注册" class="headerlink" title="登录注册"></a>登录注册</h3><h3 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h3><h2 id="语音机器人聊天"><a href="#语音机器人聊天" class="headerlink" title="语音机器人聊天"></a>语音机器人聊天</h2><h2 id="微信精选文章"><a href="#微信精选文章" class="headerlink" title="微信精选文章"></a>微信精选文章</h2><h2 id="物流及电话号码归属地查询"><a href="#物流及电话号码归属地查询" class="headerlink" title="物流及电话号码归属地查询"></a>物流及电话号码归属地查询</h2><h2 id="美女相册"><a href="#美女相册" class="headerlink" title="美女相册"></a>美女相册</h2><h2 id="个性化二维码扫描与生成"><a href="#个性化二维码扫描与生成" class="headerlink" title="个性化二维码扫描与生成"></a>个性化二维码扫描与生成</h2><h2 id="定位与查看地图"><a href="#定位与查看地图" class="headerlink" title="定位与查看地图"></a>定位与查看地图</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;借助流行的第三方 SDK 及框架，开发“生活小助手 App ”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-std.dprcdn.net/files/acc_587316/EIjPeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="慕课网" scheme="http://yoursite.com/categories/%E6%85%95%E8%AF%BE%E7%BD%91/"/>
    
      <category term="带领新手快速开发 Android App" scheme="http://yoursite.com/categories/%E6%85%95%E8%AF%BE%E7%BD%91/%E5%B8%A6%E9%A2%86%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91-Android-App/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>编程小白的第一本 Python 入门书</title>
    <link href="http://yoursite.com/2017/11/02/First-Python/"/>
    <id>http://yoursite.com/2017/11/02/First-Python/</id>
    <published>2017-11-02T03:16:00.000Z</published>
    <updated>2017-11-02T03:21:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Python 入门" scheme="http://yoursite.com/categories/Python/Python-%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Python 入门" scheme="http://yoursite.com/tags/Python-%E5%85%A5%E9%97%A8/"/>
    
      <category term="编程小白的第一本 Python 入门书" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E5%B0%8F%E7%99%BD%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC-Python-%E5%85%A5%E9%97%A8%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Head First Java</title>
    <link href="http://yoursite.com/2017/11/02/Head-First-Java/"/>
    <id>http://yoursite.com/2017/11/02/Head-First-Java/</id>
    <published>2017-11-02T03:15:18.000Z</published>
    <updated>2017-12-07T14:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Java-的垃圾回收"><a href="#Java-的垃圾回收" class="headerlink" title="Java  的垃圾回收"></a>Java  的垃圾回收</h2><p>p40</p><h2 id="对象的创建内存示意图"><a href="#对象的创建内存示意图" class="headerlink" title="对象的创建内存示意图"></a>对象的创建内存示意图</h2><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/pdfDga" alt=""></p><p>对象的引用变量有多大？</p><p>除非你和 JVM 开发团队有交情，不然不知道，在同一个 JVM 中，引用变量的大小是一样的。若你是要讨论内存分配的问题，你要关心的应该是需要建立多少个对象和引用，以及对象的实际大小。</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/8gy7r7" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/8TbHd" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/GDRPWt" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/wIb8PC" alt=""></p><h2 id="Head-First-Java-基础知识附录"><a href="#Head-First-Java-基础知识附录" class="headerlink" title="Head First Java 基础知识附录"></a>Head First Java 基础知识附录</h2><h3 id="取得命令行用户输入字符串的方法"><a href="#取得命令行用户输入字符串的方法" class="headerlink" title="取得命令行用户输入字符串的方法"></a>取得命令行用户输入字符串的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">Helper helper = <span class="keyword">new</span> Helper();</div><div class="line">System.out.println(helper.getUserInput(<span class="string">"Please enter a number: "</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserInput</span><span class="params">(String prompt)</span> </span>&#123;</div><div class="line">String inputLine = <span class="keyword">null</span>;</div><div class="line">System.out.println(prompt + <span class="string">" "</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">BufferedReader is = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">inputLine = is.readLine();</div><div class="line"><span class="keyword">if</span> (inputLine.length() == <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> inputLine;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (inputLine.length() == <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这是做”用户什么都没输入的处理”，不加这句，什么也不会输出</p><p>另外</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String string = <span class="string">"dsfs"</span>;</div><div class="line">System.out.println(string.length());</div></pre></td></tr></table></figure><p>String 类型的变量也有 length() 方法，不止数组有。</p><p>Returns:</p><p>the length of the sequence of characters represented by this object.</p><p>如果 string 是 null ，则string.length() 会报空指向异常。</p><h3 id="foreach-与-for"><a href="#foreach-与-for" class="headerlink" title="foreach 与 for"></a>foreach 与 for</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> cell : locationCells ) &#123;···&#125;</div></pre></td></tr></table></figure><p>编译器会这么做：</p><ol><li>创建名为 cell 的 int 变量</li><li>将 locationCells 的第一个元素值赋给 cell</li><li>执行循环内容</li><li>赋值给下一个元素 cell</li><li>重复执行至所有的元素被运行完毕为止</li></ol><p>locationCells 的集合必须是数组或其他集合的引用。而且 int 这个位置的类型要与 locationCells 兼容。</p><blockquote><p>注意：可以看出，在 foreach 的执行过程中，采用了数组数据赋值，所以，cell 值的改变并不会影响 原来数组里那个位置的元素值。如果需要改变原来的数组，如排序，就要用之前的 for 循环。涉及到「赋值」的操作，都不能用foreach.</p></blockquote><p>原始的 for 循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;<span class="number">0</span> ; i++ ) &#123;···&#125;</div><div class="line">        <span class="number">1</span>        <span class="number">2</span>     <span class="number">3</span>      <span class="number">4</span></div></pre></td></tr></table></figure><p>运行顺序：</p><p>1 -&gt; 2 ：1. true  -&gt; 4  -&gt; 3  -&gt; 2  : 1. true  -&gt; 4  -&gt; 3  -&gt; 2  :1. true  -&gt; 4  -&gt; 3  -&gt; 2  :</p><p>​               2.false  -&gt; end                 2.false  -&gt; end                2.false  -&gt; end</p><p>for 与 while 比较：</p><p>不知道执行次数用 while，知道执行次数用 for更清晰。</p><h3 id="String-转-int"><a href="#String-转-int" class="headerlink" title="String 转 int"></a>String 转 int</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> num = Integer.parseInt(<span class="string">"3"</span>);</div></pre></td></tr></table></figure><p>Integer 的 parseInt() 方法，能将 String 解析。</p><p>这个方法仅对代表数字的 String 起作用，除此之外，程序就会崩溃，抛出异常。</p><h3 id="Java-传参数是值拷贝"><a href="#Java-传参数是值拷贝" class="headerlink" title="Java 传参数是值拷贝"></a>Java 传参数是值拷贝</h3><p>参数的值是由实参拷贝而来的，参数的改变不会影响到原先的值，但要是传递的是引用变量，那么引用变量的远程控制（字节组合代表取得远程控制对象的方法）也会拷贝过来，那么参数的改变就会影响原来的值。</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/YTC5LE" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/H8Ym1i" alt=""></p><h3 id="变量的比较"><a href="#变量的比较" class="headerlink" title="变量的比较"></a>变量的比较</h3><ol><li>== ：用来比较两个变量的字节组合是否相等，对于 primitive 主数据类型来说，字节组合就是实际的变量值，对于引用来说，字节组合是取得对象的方法（指针），== 就是判断两个引用是否指向同一个对象。</li><li>equals（）：用来判断两个对象是否在意义上相等。即对象的相等性。</li></ol><h3 id="实例变量-VS-局部变量"><a href="#实例变量-VS-局部变量" class="headerlink" title="实例变量 VS 局部变量"></a>实例变量 VS 局部变量</h3><p>实例变量声明在类内，未初始化时，有默认值。integer 和 char 类型默认为 0 ，boolean 默认为 false，对象引用默认为 null。null 表示没有操作对象的远程控制，他是个引用而不是对象。</p><p>局部变量声明在方法内，未初始化时，没有默认值。方法的参数也是局部变量。如果局部变量未初始化就使用，编译器会报错。</p><h3 id="random-方法产生随机数"><a href="#random-方法产生随机数" class="headerlink" title="random() 方法产生随机数"></a>random() 方法产生随机数</h3><p>产生 [n,m] 之间的随机数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x = (<span class="keyword">int</span>)( Math.random() * (m-n+<span class="number">1</span>) + n );</div></pre></td></tr></table></figure><p>Math.random() 方法返回介于 0 与 1 之间的 double 值，然后将此值乘以数组元素个数，再取整数值。</p><p>random() Returns:</p><p>a pseudorandom <code>double</code> greater than or equal to <code>0.0</code> and less than <code>1.0</code>.</p><p>大于等于 0 ，小于 1.</p><p>产生 [0,n] 之间的随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x = (<span class="keyword">int</span>)( Math,random() * (n + <span class="number">1</span> ));</div></pre></td></tr></table></figure><h3 id="写伪代码参考"><a href="#写伪代码参考" class="headerlink" title="写伪代码参考"></a>写伪代码参考</h3><p>Chapter 5  Page 100</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/mz9c7e" alt=""></p><h3 id="类、方法、变量的命名规则"><a href="#类、方法、变量的命名规则" class="headerlink" title="类、方法、变量的命名规则"></a>类、方法、变量的命名规则</h3><ol><li>必须以字母，下划线，或 $ 开头</li><li>除第一个字符外，后面可以用数字</li><li>避开 Java 的关键字</li></ol><h3 id="变量的两种口味"><a href="#变量的两种口味" class="headerlink" title="变量的两种口味"></a>变量的两种口味</h3><ol><li>香辣的对象引用：保存的是对象的引用，以字节来表示取得对象的方法（遥控器）。</li><li>清凉的 primitive 主数据类型：保存的是变量本身，以字节代表实际的变量值，有 boolean、char、byte、short、int、long、float、double 8种。</li></ol><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/zJv58u" alt=""></p><p>注意，数组不论被声明来承载的是 primitive 主数据类型，或对象引用，数组永远是对象。</p><h3 id="Java-是个强类型语言"><a href="#Java-是个强类型语言" class="headerlink" title="Java 是个强类型语言"></a>Java 是个强类型语言</h3><p>类型不许乱用，可以被隐含的放大（小值放大容器），或明确的缩小（强制类型转换）</p><h3 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h3><p>Java 中内置了数百个类，被称为 API，其实他就是个函数库，你可以把他当做自己写的来用。ArrayList 类就是 Java 函数库里的一个。</p><p>使用函数库时，要在使用到该类时写出完整的类名，或是在源文件开头 import 进它的包名，除非是来源于 java.lang 这个包中，java.lang 是个预先被引用的包，是个经常会用到的基础包。</p><p>类用包来组织，但 import 绝不是 C 里的 include，import 只是会帮你省下每个类前面的包名称，程序并不会因为 import 而变大或变慢。</p><p>以 javax 开头的包以前曾经是扩展，后来才取得了标准的名份。</p><h3 id="ArrayList-类"><a href="#ArrayList-类" class="headerlink" title="ArrayList 类"></a>ArrayList 类</h3><p>ArrayList 类是 java.util 工具类的代表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Egg&gt; myList = <span class="keyword">new</span> ArrayList&lt;Egg&gt;();</div><div class="line"></div><div class="line"><span class="comment">//虽然 ArrayList 里返回的是 Object，但编译器会帮你做类型转换，转成 Egg 类型</span></div></pre></td></tr></table></figure><p>新的 ArrayList 对象虽然和数组一样会创建在堆上，但他们有本质的不同</p><table><thead><tr><th style="text-align:center">ArrayList</th><th style="text-align:center">数组</th></tr></thead><tbody><tr><td style="text-align:center">使用 ArrayList，只是运用 ArrayList 类型的对象，跟使用其他对象一样，用 “.” 运算符调用它的方法。</td><td style="text-align:center">使用数组，要用特殊的数组语法 []，无法调用它的方法，最多只能存取它的 length 实例变量。</td></tr><tr><td style="text-align:center">ArrayList 会自动管理大小</td><td style="text-align:center">数组要定义它的大小，且大小不能改变</td></tr><tr><td style="text-align:center">ArrayList 只能携带对象，不能装 primitive 主数据类型，但是非要装的话，编译器会自动将 primitive 包装成 Object ，再放入 ArrayList 中</td><td style="text-align:center">在装载 primitive 主数据类型时，数组比 ArrayList 快</td></tr><tr><td style="text-align:center"><string> 是类型参数，代表是 String 的集合</string></td></tr></tbody></table><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/93zI2w" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/h4f7Lr" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/qnBqcw" alt=""></p><h3 id="短运算的使用"><a href="#短运算的使用" class="headerlink" title="短运算的使用"></a>短运算的使用</h3><p>可以用这种方式避免调用内容为 null 的指针变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( refVar ! = <span class="keyword">null</span> &amp;&amp; refVar.isValidType())&#123;</div><div class="line">  <span class="comment">//执行有效变量的工作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Java-基础知识附录"><a href="#Java-基础知识附录" class="headerlink" title="Java 基础知识附录"></a>Java 基础知识附录</h2><h3 id="赋值数组"><a href="#赋值数组" class="headerlink" title="赋值数组"></a>赋值数组</h3><p>Java 中有复制数组的方法，C++ 中没有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Integer[] arr1 = SortTestHelper.generateRandomArray(n, <span class="number">0</span>, n);</div><div class="line"></div><div class="line">Integer[] arr2 = Arrays.copyOf(arr1, arr1.length);</div></pre></td></tr></table></figure><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p><strong>一、概述</strong></p><p>在 C 和 C++ 语言中都有 assert 关键，表示断言。</p><p>在 Java 中，同样也有 assert 关键字，表示断言，用法和含义都差不多。</p><p><strong>二、语法</strong></p><p>在 Java 中，assert 关键字是从 JAVA SE 1.4 引入的，为了避免和老版本的 Java 代码中使用了 assert 关键字导致错误，Java 在执行的时候默认是不启动断言检查的（这个时候，所有的断言语句都将忽略！），如果要开启断言检查，则需要用开关 -enableassertions 或 -ea 来开启。</p><p>assert关键字语法很简单，有两种用法：</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> &lt;<span class="keyword">boolean</span>表达式&gt;</div></pre></td></tr></table></figure><p>如果 <boolean表达式> 为 true，则程序继续执行。</boolean表达式></p><p>如果为 false，则程序抛出 AssertionError，并终止执行。</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> &lt;<span class="keyword">boolean</span>表达式&gt; : &lt;错误信息表达式&gt;</div></pre></td></tr></table></figure><p>如果 <boolean表达式> 为 true，则程序继续执行。</boolean表达式></p><p>如果为 false，则程序抛出 java.lang.AssertionError，并输入 &lt;错误信息表达式&gt;。</p></li></ol><p><strong>三、应用实例</strong> </p><p>下面给出一个例子，通过例子说明其用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssertFoo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//断言1结果为true，则继续往下执行</span></div><div class="line"></div><div class="line">        <span class="keyword">assert</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"断言1没有问题，Go！"</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"\n-----------------\n"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//断言2结果为false，程序终止</span></div><div class="line"></div><div class="line">        <span class="keyword">assert</span> <span class="keyword">false</span> : <span class="string">"断言失败，此表达式的信息将会在抛出异常的时候输出！"</span>;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"断言2没有问题，Go！"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>保存代码到 C:\AssertFoo.java，然后按照下面的方式执行，查看控制台输出结果：</p><p><strong>1、编译程序：</strong></p><p>C:>javac AssertFoo.java </p><p><strong>2、默认执行程序，没有开启-ea开关：</strong></p><p>C:>java AssertFoo</p><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">断言<span class="number">1</span>没有问题，Go！</div><div class="line"> -----------------</div><div class="line">断言<span class="number">2</span>没有问题，Go！</div></pre></td></tr></table></figure><p><strong>3、开启-ea开关，执行程序：</strong></p><p>C:>java -ea AssertFoo</p><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">断言<span class="number">1</span>没有问题，Go！</div><div class="line">-----------------</div><div class="line">Exception in thread <span class="string">"main"</span> java.lang.AssertionError: 断言失败，此表达式的信息将</div><div class="line">会在抛出异常的时候输出！</div><div class="line">        at AssertFoo.main(AssertFoo.java:<span class="number">10</span>)</div></pre></td></tr></table></figure><p><strong>四、陷阱</strong></p><p>assert 关键字用法简单，但是使用 assert 往往会让你陷入越来越深的陷阱中。应避免使用。笔者经过研究，总结了以下原因：</p><p>1、assert 关键字需要在运行时候显式开启才能生效，否则你的断言就没有任何意义。而现在主流的 Java IDE 工具默认都没有开启 -ea 断言检查功能。这就意味着你如果使用 IDE 工具编码，调试运行时候会有一定的麻烦。并且，对于 Java Web 应用，程序代码都是部署在容器里面，你没法直接去控制程序的运行，如果一定要开启 -ea 的开关，则需要更改 Web 容器的运行配置参数。这对程序的移植和部署都带来很大的不便。</p><p>2、用 assert 代替 if 是陷阱之二。assert 的判断和if语句差不多，但两者的作用有着本质的区别：assert 关键字本意上是为测试调试程序时使用的，但如果不小心用 assert 来控制了程序的业务流程，那在测试调试结束后去掉assert 关键字就意味着修改了程序的正常的逻辑。 </p><p>3、assert 断言失败将面临程序的退出。这在一个生产环境下的应用是绝不能容忍的。一般都是通过异常处理来解决程序中潜在的错误。但是使用断言就很危险，一旦失败系统就挂了。</p><p><strong>五、对assert的思考</strong></p><p>assert 既然是为了调试测试程序用，不在正式生产环境下用，那应该考虑更好的测试 JUint 来代替其做用，JUint 相对 assert 关键的所提供的功能是有过之而无不及。当然完全可以通过 IDE debug 来进行调试测试。在此看来，assert 的前途一片昏暗。</p><p>因此，应当避免在 Java 中使用 assert 关键字，除非哪一天 Java 默认支持开启 -ea 的开关，这时候可以考虑。对比一下，assert 能给你带来多少好处，多少麻烦，这是我们选择是否使用的的原则。</p><p><strong>评论：</strong></p><p>assert 有很大的用处<br>首先可以用在单元测试代码中。junit 侵入性是很强的，如果整个工程大量的代码都使用了 junit，就难以去掉或者是选择另外一个框架。如果单元测试代码很多，并且想复用这些单元测试案例，应该选择 assert 而不是 junit，便于使用别的单元测试框架，比如 TestNG。同理正式的功能代码根本就不应该出现 Junit，应该使用 assert.</p><p>assert 主要适合在基类，框架类，接口类，核心代码类，工具类中。换言之，当你的代码的调用者是另外一个程序员写得业务代码，或者是另外一个子系统时，就很有必要使用它。比如你做了一个快速排序的算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">quickSort</span><span class="params">(List&lt;Integer&gt; list)</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">assert</span> list != <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 申请临时空间</span></div><div class="line"></div><div class="line">  <span class="comment">//开始排序</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i : list)&#123;</div><div class="line"></div><div class="line">      <span class="comment">//</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种情况下，如果不检查传入参数的正确性，会抛出一个莫名其妙的空指针错误。你的调用者可能并不清楚你代码的细节，在一个系统的深处调试一个空指针错误是很浪费时间的。就应该直接明确的告诉你的调用者是传入的参数有问题。否则他会怀疑你的代码有 BUG。使用 assert 可以避免两个程序员之间互相指责对方写的代码有问题。</p><p>assert 适用那些你知道具体是什么错误，你和你的调用者已经约定应该由你的调用者去排除或检查的错误。你通过一个断言告诉你的调用者。assert 不适用那些外部系统造成的错误，比如用户输入数据的错误，某个外部文件格式错误。这些错误不是你的调用者而是用户造成的，甚至于不属于异常，因为出现输入错误和文件格式错误是经常的，这些错误应该由业务代码去检查。</p><p>assert 比较适合于被频繁调用的 基类，框架代码，工具类，核心代码，接口代码中，这正是它在运行时被去掉的原因。测试代码应该在测试阶段开启 -ea 参数，便于对系统深处的核心代码做仔细的测试。</p><p>Java 较少使用 assert 的原因是 Java 有很完整的OO体系，强制类型转换出现得较少，所以不需要类似 c 那样需要频繁的检查指针的类型是否正确，指针是否为空。同时 Java 也很少直接管理内存或缓冲区，所以不需要频繁的检查传入的缓冲区是否为空或者是已经越界。</p><p>但使用好 assert 有助于提高框架代码的正确性和减少框架代码的使用者的调试时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Java-的垃圾回收&quot;&gt;&lt;a href=&quot;#Java-的垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;Java  的垃圾回收&quot;&gt;&lt;/a&gt;Java  的垃圾回收&lt;/h2&gt;&lt;p&gt;p40&lt;/p&gt;
&lt;h2 id=&quot;对象
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Head First Java" scheme="http://yoursite.com/categories/Java/Head-First-Java/"/>
    
    
      <category term="Head First Java" scheme="http://yoursite.com/tags/Head-First-Java/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发中遇到的 bug</title>
    <link href="http://yoursite.com/2017/10/30/Android-developing-bug/"/>
    <id>http://yoursite.com/2017/10/30/Android-developing-bug/</id>
    <published>2017-10-30T09:36:34.000Z</published>
    <updated>2017-11-02T03:18:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1496264057429-6a331647b69e?auto=format&amp;fit=crop&amp;w=1502&amp;q=60&amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D" alt=""></p><a id="more"></a><h2 id="NoSuchMethodError-No-static-method-wrapSharedElementTransition"><a href="#NoSuchMethodError-No-static-method-wrapSharedElementTransition" class="headerlink" title="NoSuchMethodError: No static method wrapSharedElementTransition"></a>NoSuchMethodError: No static method wrapSharedElementTransition</h2><p>上汽大通项目遇到火山级 bug，点击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">java.lang.NoSuchMethodError: <span class="function">No <span class="keyword">static</span> method <span class="title">wrapSharedElementTransition</span><span class="params">(Ljava/lang/Object;)</span>Ljava/lang/Object</span>; in <span class="class"><span class="keyword">class</span> <span class="title">Landroid</span>/<span class="title">support</span>/<span class="title">v4</span>/<span class="title">app</span>/<span class="title">FragmentTransitionCompat21</span></span>; <span class="function">or its <span class="keyword">super</span> <span class="title">classes</span> <span class="params">(declaration of <span class="string">'android.support.v4.app.FragmentTransitionCompat21'</span> appears in /data/app/com.example.aidrive2<span class="number">-1</span>/base.apk)</span></span></div><div class="line"><span class="function">                                                                          at android.support.v4.app.BackStackRecord.<span class="title">getSharedElementTransition</span><span class="params">(BackStackRecord.java:<span class="number">1156</span>)</span></span></div><div class="line"><span class="function">                                                                          at android.support.v4.app.BackStackRecord.<span class="title">configureTransitions</span><span class="params">(BackStackRecord.java:<span class="number">1222</span>)</span></span></div><div class="line"><span class="function">                                                                          at android.support.v4.app.BackStackRecord.<span class="title">beginTransition</span><span class="params">(BackStackRecord.java:<span class="number">1112</span>)</span></span></div><div class="line"><span class="function">                                                                          at android.support.v4.app.BackStackRecord.<span class="title">run</span><span class="params">(BackStackRecord.java:<span class="number">721</span>)</span></span></div><div class="line"><span class="function">                                                                          at android.support.v4.app.FragmentManagerImpl.<span class="title">execPendingActions</span><span class="params">(FragmentManager.java:<span class="number">1677</span>)</span></span></div><div class="line"><span class="function">                                                                          at android.support.v4.app.FragmentManagerImpl$1.<span class="title">run</span><span class="params">(FragmentManager.java:<span class="number">536</span>)</span></span></div><div class="line"><span class="function">                                                                          at android.os.Handler.<span class="title">handleCallback</span><span class="params">(Handler.java:<span class="number">815</span>)</span></span></div><div class="line"><span class="function">                                                                          at android.os.Handler.<span class="title">dispatchMessage</span><span class="params">(Handler.java:<span class="number">104</span>)</span></span></div><div class="line"><span class="function">                                                                          at android.os.Looper.<span class="title">loop</span><span class="params">(Looper.java:<span class="number">194</span>)</span></span></div><div class="line"><span class="function">                                                                          at android.app.ActivityThread.<span class="title">main</span><span class="params">(ActivityThread.java:<span class="number">5556</span>)</span></span></div><div class="line"><span class="function">                                                                          at java.lang.reflect.Method.<span class="title">invoke</span><span class="params">(Native Method)</span></span></div><div class="line"><span class="function">                                                                          at java.lang.reflect.Method.<span class="title">invoke</span><span class="params">(Method.java:<span class="number">372</span>)</span></span></div><div class="line"><span class="function">                                                                          at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.<span class="title">run</span><span class="params">(ZygoteInit.java:<span class="number">967</span>)</span></span></div><div class="line"><span class="function">                                                                          at com.android.internal.os.ZygoteInit.<span class="title">main</span><span class="params">(ZygoteInit.java:<span class="number">762</span>)</span></span></div></pre></td></tr></table></figure><h2 id="app-dexDebug：-Library-Java-JavaVirtualMachines-jdk1-8-0-92-jdk-Contents-Home-bin-java’’-finished-with-non-zero-exit-value-2"><a href="#app-dexDebug：-Library-Java-JavaVirtualMachines-jdk1-8-0-92-jdk-Contents-Home-bin-java’’-finished-with-non-zero-exit-value-2" class="headerlink" title="app:dexDebug：/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/bin/java’’ finished with non-zero exit value 2"></a>app:dexDebug：/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/bin/java’’ finished with non-zero exit value 2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed <span class="keyword">for</span> task <span class="string">':app:dexDebug'</span>. &gt; com.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process <span class="string">'command '</span>/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/bin/java<span class="string">''</span> finished with non-zero exit value <span class="number">2</span></div></pre></td></tr></table></figure><p>是 app/build.gradle 依赖包的版本问题，</p><p>参考：</p><p><a href="https://stackoverflow.com/questions/30001051/appdexdebug-execexception-finished-with-non-zero-exit-value-2" target="_blank" rel="external">https://stackoverflow.com/questions/30001051/appdexdebug-execexception-finished-with-non-zero-exit-value-2</a></p><p><a href="http://www.cnblogs.com/creasylai19/p/5027757.html" target="_blank" rel="external">http://www.cnblogs.com/creasylai19/p/5027757.html</a></p><p>状态：未解决</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1496264057429-6a331647b69e?auto=format&amp;amp;fit=crop&amp;amp;w=1502&amp;amp;q=60&amp;amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Android Developing Bug" scheme="http://yoursite.com/categories/Android/Android-Developing-Bug/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>论文相关</title>
    <link href="http://yoursite.com/2017/10/29/MyPaper/"/>
    <id>http://yoursite.com/2017/10/29/MyPaper/</id>
    <published>2017-10-29T14:11:38.000Z</published>
    <updated>2017-11-02T03:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1438159510492-d44b489bd1b6?auto=format&amp;fit=crop&amp;w=1500&amp;q=60&amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D" alt=""></p><a id="more"></a><p><a href="http://www.cheyun.com/content/10999" target="_blank" rel="external">彩虹无线发布“立方体计划”：前装车联网大数据的两种玩法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1438159510492-d44b489bd1b6?auto=format&amp;amp;fit=crop&amp;amp;w=1500&amp;amp;q=60&amp;amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="毕设论文" scheme="http://yoursite.com/categories/%E6%AF%95%E8%AE%BE%E8%AE%BA%E6%96%87/"/>
    
      <category term="材料收集" scheme="http://yoursite.com/categories/%E6%AF%95%E8%AE%BE%E8%AE%BA%E6%96%87/%E6%9D%90%E6%96%99%E6%94%B6%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Hencoder 朱凯的高级教程</title>
    <link href="http://yoursite.com/2017/10/29/hencoder/"/>
    <id>http://yoursite.com/2017/10/29/hencoder/</id>
    <published>2017-10-29T13:57:51.000Z</published>
    <updated>2017-11-02T03:21:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1470328358326-dee4879da669?auto=format&amp;fit=crop&amp;w=2700&amp;q=60&amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D" alt=""></p><a id="more"></a><h2 id="给高级-Android-工程师的进阶手册"><a href="#给高级-Android-工程师的进阶手册" class="headerlink" title="给高级 Android 工程师的进阶手册"></a>给高级 Android 工程师的进阶手册</h2><p>第一讲，讲 UI </p><p>一般使用 自带控件 + 开源库，可以实现大部分 UI 效果。但一些新颖的效果，要自定义 View 来实现。</p><p>自定义 View 的 3 个关键点：</p><ol><li>布局</li><li>绘制</li><li>触摸反馈</li></ol><p>听课：</p><p>录播的视频 + 文字 + 练习项目。视频负责打通概念，文字负责阐述细节，练习项目负责最后一公里，让你从「我懂了」变成「我会了」</p><h2 id="自定义-View-1-1-绘制基础"><a href="#自定义-View-1-1-绘制基础" class="headerlink" title="自定义 View 1-1 绘制基础"></a>自定义 View 1-1 绘制基础</h2><p>绘制就是控件内容的显示。</p><p>自定义绘制就是你来接管绘制的过程，操作绘制细节。使用系统 API 是绘制不出柱状图和饼形图的，即使绘制出来，性能也不佳，这时要使用自定义绘制 View。</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/FjWJE" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/xA8moN" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/ibMahJ" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/K3h2BO" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/PRepXD" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1470328358326-dee4879da669?auto=format&amp;amp;fit=crop&amp;amp;w=2700&amp;amp;q=60&amp;amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Hencoder 朱凯的高级教程" scheme="http://yoursite.com/categories/Android/Hencoder-%E6%9C%B1%E5%87%AF%E7%9A%84%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="朱凯" scheme="http://yoursite.com/tags/%E6%9C%B1%E5%87%AF/"/>
    
  </entry>
  
  <entry>
    <title>颠覆你的传统英语学习 - 杨萃先</title>
    <link href="http://yoursite.com/2017/10/27/Pronunciation-of-Miss-Yang/"/>
    <id>http://yoursite.com/2017/10/27/Pronunciation-of-Miss-Yang/</id>
    <published>2017-10-27T06:06:04.000Z</published>
    <updated>2017-11-01T06:49:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1466854076813-4aa9ac0fc347?auto=format&amp;fit=crop&amp;w=2400&amp;q=60&amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D" alt=""></p><a id="more"></a><p>视频地址：<a href="https://search.bilibili.com/all?keyword=%E6%92%95%E6%8E%89%E5%8D%95%E8%AF%8D%E8%AF%AD%E6%B3%95%E4%B9%A6%EF%BC%8C%E9%A2%A0%E8%A6%86%E4%BD%A0%E7%9A%84%E4%BC%A0%E7%BB%9F%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0&amp;from_source=banner_search" target="_blank" rel="external">撕掉单词语法书，颠覆你的传统英语学习</a></p><h2 id="第-0-课-找对方法"><a href="#第-0-课-找对方法" class="headerlink" title="第 0 课 - 找对方法"></a>第 0 课 - 找对方法</h2><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/vgXRlR" alt="正确的方法"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/4WF92Q" alt="听100小时"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/XeudRn" alt="学生活中的词"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/zTtYUW" alt="说100小时"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/cx2Hm8" alt="听好听的"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/YRjqHy" alt="先练听说"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/Oe1opZ" alt="背课文"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/YnNMY5" alt="下载app"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/arc4KG" alt="每天找5个生词"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/okCL7C" alt="听这些"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/vl2u5t" alt="喜马拉雅上的这些事之前的学员"></p><p>本节课作业：</p><ol><li>下载 app，找到和自己生活、工作密切相关的部分听，听不懂的，立马查，可以看字幕，怎么能听懂怎么听。听满 100 小时。</li><li>生活中，环境中，只要是不会的生词，立马查。至少找到五个不会的。</li><li>关注老师个人公众号 “途正英语”。看老师的文章和小故事。</li><li>找志同道合的小伙伴讨论，说英语。</li></ol><h2 id="第-1-课-背单词大法"><a href="#第-1-课-背单词大法" class="headerlink" title="第 1 课 - 背单词大法"></a>第 1 课 - 背单词大法</h2><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/yVXeUo" alt="背单词"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/VGy0QW" alt="不推荐的方法"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/TdPGqD" alt="什么时候查"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/PKBv4G" alt="推荐的方法"></p><p>记单词：</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/zhhfSo" alt="记单词"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/jP8W3" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/vAWBm9" alt="象形"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/ZXC66N" alt="衍生方法"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/WtmDWL" alt="象象"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/j2q1ji" alt="象象"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/yzHndv" alt="合成"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/w3Mr7S" alt="合成"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/CD6ksy" alt="合成"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/dqaCMt" alt="词根词缀"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/9KkL6i" alt="词根词缀"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/fcYBZS" alt="ceed = walk"></p><p>作业：</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/ehbhKH" alt="作业"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/ojYfdm" alt="作业"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1466854076813-4aa9ac0fc347?auto=format&amp;amp;fit=crop&amp;amp;w=2400&amp;amp;q=60&amp;amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="英语" scheme="http://yoursite.com/categories/%E8%8B%B1%E8%AF%AD/"/>
    
      <category term="英语口语" scheme="http://yoursite.com/categories/%E8%8B%B1%E8%AF%AD/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD/"/>
    
    
      <category term="英语口语" scheme="http://yoursite.com/tags/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>纪老师英语音标课程</title>
    <link href="http://yoursite.com/2017/10/26/Pronunciation-of-Miss-Ji/"/>
    <id>http://yoursite.com/2017/10/26/Pronunciation-of-Miss-Ji/</id>
    <published>2017-10-26T05:00:14.000Z</published>
    <updated>2017-11-02T03:17:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1485738422979-f5c462d49f74?w=1375&amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D" alt="自由女神"></p><a id="more"></a><h2 id="视频地址"><a href="#视频地址" class="headerlink" title="视频地址"></a>视频地址</h2><p><a href="http://www.360doc.com/content/14/0801/16/9675619_398636221.shtml" target="_blank" rel="external">纪老师英语 - 音标篇</a></p><p><a href="http://static.youku.com/v20170518.0/v/swf/upsplayer/loader.swf?VideoIDS=XMTQ5MjM2NDI4&amp;embedid=NTguMjA5Ljc4LjE4OQIzNzMwOTEwNwJ3d3cuMzYwZG9jLmNvbQIvY29udGVudC8xNC8wODAxLzE2Lzk2NzU2MTlfMzk4NjM2MjIxLnNodG1s&amp;wd=&amp;winType=BDskin&amp;cna=tJySD%2BT%2BAQ0CAXTiYawfmTuw&amp;partnerid=0edbfd2e4fc91b72&amp;vext=pid%253D0edbfd2e4fc91b72%2526emb%253DNTguMjA5Ljc4LjE4OQIzNzMwOTEwNwJ3d3cuMzYwZG9jLmNvbQIvY29udGVudC8xNC8wODAxLzE2Lzk2NzU2MTlfMzk4NjM2MjIxLnNodG1s%2526bc%253D%2526cna%253DtJySD%2BT%2BAQ0CAXTiYawfmTuw%2526vvlogext%253Dpc_i%25253D14603834142639jT%252526pc_u%25253D-%252526rvpvid%25253D-%252526rycid%25253D-%252526yvft%25253D1508992567232%252526vsidc%25253D1%252526seid%25253D1509027642371h8w%252526vstp%25253D9%252526svstp%25253D3%2526type%253D0%2526embsig%253D1_1509028782_ff5ca560dc4dd7c1dd0c894c14395fbf" target="_blank" rel="external">纪老师 英语音标口诀记忆法 – 音标一 5 个元音 + 1 个辅音</a></p><p><a href="http://static.youku.com/v20170518.0/v/swf/upsplayer/loader.swf?VideoIDS=XMzc0ODQ5MDQ0&amp;embedid=NTguMjA5Ljc4LjE4OQI5MzcxMjI2MQJ3d3cuMzYwZG9jLmNvbQIvY29udGVudC8xNC8wODAxLzE2Lzk2NzU2MTlfMzk4NjM2MjIxLnNodG1s&amp;wd=&amp;winType=BDskin&amp;cna=tJySD%2BT%2BAQ0CAXTiYawfmTuw&amp;partnerid=0edbfd2e4fc91b72&amp;vext=pid%253D0edbfd2e4fc91b72%2526emb%253DNTguMjA5Ljc4LjE4OQI5MzcxMjI2MQJ3d3cuMzYwZG9jLmNvbQIvY29udGVudC8xNC8wODAxLzE2Lzk2NzU2MTlfMzk4NjM2MjIxLnNodG1s%2526bc%253D%2526cna%253DtJySD%2BT%2BAQ0CAXTiYawfmTuw%2526vvlogext%253Dpc_i%25253D14603834142639jT%252526pc_u%25253D-%252526rvpvid%25253D-%252526rycid%25253D-%252526yvft%25253D1508992567232%252526vsidc%25253D1%252526seid%25253D1509027642371h8w%252526vstp%25253D8%252526svstp%25253D2%2526type%253D0%2526embsig%253D1_1509028759_a2b5284c60c3c2ed7a9d57714d0c4d70" target="_blank" rel="external">纪老师 英语音标口诀记忆法 – 音标二 5 个辅音的发音方法</a></p><p><a href="http://static.youku.com/v20170518.0/v/swf/upsplayer/loader.swf?VideoIDS=XMzc0ODQ5MTY0&amp;embedid=MjE5LjIyOC4xNDYuMTkxAjkzNzEyMjkxAnd3dy4zNjBkb2MuY29tAi9jb250ZW50LzE0LzA4MDEvMTYvOTY3NTYxOV8zOTg2MzYyMjEuc2h0bWw%3D&amp;wd=&amp;winType=BDskin&amp;cna=tJySD%2BT%2BAQ0CAXTiYawfmTuw&amp;partnerid=0edbfd2e4fc91b72&amp;vext=pid%253D0edbfd2e4fc91b72%2526emb%253DMjE5LjIyOC4xNDYuMTkxAjkzNzEyMjkxAnd3dy4zNjBkb2MuY29tAi9jb250ZW50LzE0LzA4MDEvMTYvOTY3NTYxOV8zOTg2MzYyMjEuc2h0bWw%253D%2526bc%253D%2526cna%253DtJySD%2BT%2BAQ0CAXTiYawfmTuw%2526vvlogext%253Dpc_i%25253D14603834142639jT%252526pc_u%25253D-%252526rvpvid%25253D1509073572844NndZCw-1509073572854%252526rycid%25253D-%252526yvft%25253D1508992567232%252526vsidc%25253D1%252526seid%25253D1509072880602Ns8%252526vstp%25253D15%252526svstp%25253D6%2526type%253D0%2526embsig%253D1_1509077805_3ceabeebb636125f6e25df3edb68a97e" target="_blank" rel="external">纪老师 英语音标口诀记忆法 – 音标三  8 个双元音的发音方法</a></p><p><a href="http://static.youku.com/v20170518.0/v/swf/upsplayer/loader.swf?VideoIDS=XMzc0ODQ5Mzg0&amp;embedid=NTguMjA5Ljc5LjE4NQI5MzcxMjM0NgJ3d3cuMzYwZG9jLmNvbQIvY29udGVudC8xNC8wODAxLzE2Lzk2NzU2MTlfMzk4NjM2MjIxLnNodG1s&amp;wd=&amp;winType=BDskin&amp;cna=tJySD%2BT%2BAQ0CAXTiYawfmTuw&amp;partnerid=0edbfd2e4fc91b72&amp;vext=pid%253D0edbfd2e4fc91b72%2526emb%253DNTguMjA5Ljc5LjE4NQI5MzcxMjM0NgJ3d3cuMzYwZG9jLmNvbQIvY29udGVudC8xNC8wODAxLzE2Lzk2NzU2MTlfMzk4NjM2MjIxLnNodG1s%2526bc%253D%2526cna%253DtJySD%2BT%2BAQ0CAXTiYawfmTuw%2526vvlogext%253Dpc_i%25253D14603834142639jT%252526pc_u%25253D-%252526rvpvid%25253D-%252526rycid%25253D-%252526yvft%25253D1508992567232%252526vsidc%25253D1%252526seid%25253D1509285631592tEg%252526vstp%25253D27%252526svstp%25253D5%2526type%253D0%2526embsig%253D1_1509289072_a16950d7e7b3d58a563f53d5c5866b3a" target="_blank" rel="external">纪老师 英语音标口诀记忆法 – 音标四 12 个辅音的发音方法</a></p><p><a href="http://v.youku.com/v_show/id_XMzc0ODQ5NjAw.html?spm=a2h0j.8191423.module_basic_relation.5~5!2~5~5!24~5!2~1~3~A" target="_blank" rel="external">纪老师 英语音标口诀记忆法 – 音标五 p、k、t 清音浊化</a></p><p><a href="http://v.youku.com/v_show/id_XNjM4OTY3MDYw.html?spm=a2h0j.8191423.module_basic_relation.5~5!2~5~5!7~5~5~A" target="_blank" rel="external">纪老师 英语音标口诀记忆法 – 音标实战篇 英语习惯用语发音练习 1 - 6 句</a></p><p><a href="http://my.tv.sohu.com/us/63345012/63891417.shtml" target="_blank" rel="external">纪老师 英语音标口诀记忆法 – 音标实战篇 英语习惯用语发音练习 32 句</a></p><p><a href="http://v.youku.com/v_show/id_XNjM4OTc5OTYw.html?spm=a2h0j.8191423.module_basic_relation.5~5!2~5~5!6~5~5~A" target="_blank" rel="external">纪老师 英语音标口诀记忆法 – 音标实战篇 英语习惯用语发音练习 71 - 79 句</a></p><p><a href="http://v.youku.com/v_show/id_XNjM4OTY3NjAw.html?spm=a2h0j.8191423.module_basic_relation.5~5!2~5~5!11~5~5~A" target="_blank" rel="external">纪老师 英语音标口诀记忆法 – 音标实战篇 英语习惯用语发音练习 108 - 135 句</a></p><h2 id="纪老师-48个国际音标的记忆口诀讲义地址"><a href="#纪老师-48个国际音标的记忆口诀讲义地址" class="headerlink" title="纪老师 - 48个国际音标的记忆口诀讲义地址"></a>纪老师 - 48个国际音标的记忆口诀讲义地址</h2><p><a href="https://pan.baidu.com/s/1bOR0ke" target="_blank" rel="external">纪老师 - 48个国际音标的记忆口诀【讲义】</a></p><h2 id="音标一"><a href="#音标一" class="headerlink" title="音标一"></a>音标一</h2><p>元音：20 个，相当于韵母</p><p>辅音：28 个，相当于声母</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/TjXfoR" alt="所有的元音辅音"></p><p>第一节学习 5 个元音和 1 个辅音：</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/jpIj8B" alt="5元1辅"></p><p>发言口诀：</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/dmtQYO" alt="发言口诀"></p><h2 id="音标二"><a href="#音标二" class="headerlink" title="音标二"></a>音标二</h2><p>第二节学习 5 个辅音 </p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/Sjp1Eq" alt="5个辅音"></p><p>f、l、m、n  的发音：一种是读汉语拼音里的flmn，另一种是读这四个英文字母发音的尾音。</p><p>后面有可以一起拼读的就发flmn的音，没有一起拼读的音就发英文字母的尾音。</p><p>r 后面有可以一起拼读的音就发 ru 音，没有一起拼读的音就发 “儿”化音。</p><h2 id="音标三"><a href="#音标三" class="headerlink" title="音标三"></a>音标三</h2><p>第三节学习 8 个双元音。</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/IdAb5M" alt="8个双元音"></p><p>英语讲究「滑音」。双元音的读法是从第一个音向后面一个滑动。</p><p>新旧音标对比如下：</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/wnPSay" alt="新旧写法对比"></p><h2 id="音标四"><a href="#音标四" class="headerlink" title="音标四"></a>音标四</h2><p>12 个辅音的发音方法</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/1CxKoG" alt=""></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/jj2RCn" alt="噘嘴的s"></p><p>噘嘴的 s，发汉语拼音的平舌 s</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/wIOO9s" alt="噘嘴的z"></p><p>噘嘴的 z，发汉语拼音的平舌 z</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/6WJ37l" alt="咬舌尖的s"></p><p>噘嘴的 s，发汉语拼音中的咬舌 s</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/4q1xp1" alt="咬舌尖的r"></p><p>咬舌尖的 r，发汉语拼音中的 r</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/Sxz4D8" alt="噘嘴的ch"></p><p>噘嘴的 ch，发汉语拼音的翘舌 ch</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/W1Wjb1" alt="噘嘴的zh"></p><p>噘嘴的 zh，发汉语拼音的翘舌 zh</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/jM386r" alt="噘嘴的chu"></p><p>噘嘴的 chu，发汉语拼音的翘舌 chu</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/O4oKa0" alt="噘嘴的zhu"></p><p>噘嘴的 zhu，发汉语拼音的翘舌 zhu</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/CVnlS" alt="ts"></p><p>chi，发音在 c 与 ch 之间，我觉得是 ci</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/0NTCJN" alt="dz"></p><p>zhi，发音在 z 与 zh 之间，我觉得是 zi</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/naFFAQ" alt="j"></p><p> y，发汉语拼音 yi</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/uX9Byt" alt="v"></p><p>不能噘嘴的 wu，上牙轻抚下唇。</p><h2 id="音标五"><a href="#音标五" class="headerlink" title="音标五"></a>音标五</h2><p>清音浊化问题，也叫音变。</p><p>p k t 胆子小，见到 s 须变音。</p><p>p 变 b，k 变 g，t 要变成 d。</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/mcw2KB" alt="清音浊化"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/v0ymss" alt="口诀"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/fw6PLU" alt="规则"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/oBn1E7" alt="举例1"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/jJl0Fr" alt="举例2"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/LRmRem" alt="举例3"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/ivMPBJ" alt="规则2"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/L8rY9N" alt="注意"></p><p>英语音标中一共有 48 个音素，讲了 31 个特殊的音素，剩下 17 个音素与汉语拼音发音相似。</p><p>如 p，读短促的 p，k，读短促的 k。</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/u0Ecxu" alt="48 个音标汇总"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1485738422979-f5c462d49f74?w=1375&amp;amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D&quot; alt=&quot;自由女神&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="英语" scheme="http://yoursite.com/categories/%E8%8B%B1%E8%AF%AD/"/>
    
      <category term="音标" scheme="http://yoursite.com/categories/%E8%8B%B1%E8%AF%AD/%E9%9F%B3%E6%A0%87/"/>
    
    
      <category term="音标" scheme="http://yoursite.com/tags/%E9%9F%B3%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>慕课网 - Android 通用框架设计与完整电商 APP 开发</title>
    <link href="http://yoursite.com/2017/10/20/imooc-Android-Complete-e-commerce-app/"/>
    <id>http://yoursite.com/2017/10/20/imooc-Android-Complete-e-commerce-app/</id>
    <published>2017-10-20T02:45:21.000Z</published>
    <updated>2017-11-01T07:02:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1486758206125-94d07f414b1c?auto=format&amp;fit=crop&amp;w=2700&amp;q=60&amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D" alt=""></p><a id="more"></a><h2 id="用到的-GitHub-上的库"><a href="#用到的-GitHub-上的库" class="headerlink" title="用到的 GitHub 上的库"></a>用到的 GitHub 上的库</h2><h3 id="字体库"><a href="#字体库" class="headerlink" title="字体库"></a>字体库</h3><p><a href="https://github.com/JoanZapata/android-iconify" target="_blank" rel="external">JoanZapata 字体库</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字体图标</span></div><div class="line">compile <span class="string">'com.joanzapata.iconify:android-iconify-ionicons:2.2.2'</span></div><div class="line">compile <span class="string">'com.joanzapata.iconify:android-iconify-fontawesome:2.2.2'</span></div></pre></td></tr></table></figure><h3 id="Fragmentation-的库"><a href="#Fragmentation-的库" class="headerlink" title="Fragmentation 的库"></a>Fragmentation 的库</h3><p><a href="https://github.com/YoKeyword/Fragmentation" target="_blank" rel="external">Fragmentation 的库</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Fragment依赖</span></div><div class="line">compile <span class="string">'me.yokeyword:fragmentation:1.1.6'</span></div><div class="line">compile <span class="string">'me.yokeyword:fragmentation-swipeback:1.1.6'</span></div></pre></td></tr></table></figure><h3 id="视图注入的库-ButterKnife"><a href="#视图注入的库-ButterKnife" class="headerlink" title="视图注入的库 ButterKnife"></a>视图注入的库 ButterKnife</h3><p>ButterKnife 的配置要参考<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a>官网，要配置 3 个地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ButterKnife依赖</span></div><div class="line">compile <span class="string">'com.jakewharton:butterknife:8.8.1'</span></div><div class="line">annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:8.8.1'</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.3.3'</span></div><div class="line">        <span class="comment">// ButterKnife 插件</span></div><div class="line">        classpath <span class="string">'com.jakewharton:butterknife-gradle-plugin:8.8.1'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line">apply plugin: <span class="string">'com.jakewharton.butterknife'</span></div></pre></td></tr></table></figure><p>BufferKnife 插件的作用是生成 R2 的类，R2 类是生成视图绑定需要的唯一 ID，资源文件 R 只能在为 application 类型的 module 里使用，为 library 类型的 module 使用 BufferKnife 插件根据 R 生成 R2 的资源文件来访问视图绑定的 ID。</p><h3 id="网络框架-retrofit"><a href="#网络框架-retrofit" class="headerlink" title="网络框架 retrofit"></a>网络框架 retrofit</h3><p><a href="http://square.github.io/retrofit/" target="_blank" rel="external">retrofit</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">理解 RESTful 架构</a></p><p><a href="http://www.csdn.net/article/2013-06-13/2815744-RESTful-API" target="_blank" rel="external">RESTful API 设计最佳实践</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//网络请求依赖</span></div><div class="line">    compile <span class="string">'com.squareup.okio:okio:1.13.0'</span></div><div class="line">    compile <span class="string">'com.squareup.okhttp3:okhttp:3.8.1'</span></div><div class="line">    compile <span class="string">'com.squareup.retrofit2:retrofit:2.3.0'</span></div><div class="line">    compile <span class="string">'com.squareup.retrofit2:converter-scalars:2.3.0'</span></div></pre></td></tr></table></figure><h3 id="Loading-加载库"><a href="#Loading-加载库" class="headerlink" title="Loading 加载库"></a>Loading 加载库</h3><p><a href="https://github.com/81813780/AVLoadingIndicatorView" target="_blank" rel="external">AVLoadingIndicatorView</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//loading 依赖</span></div><div class="line">    compile <span class="string">'com.wang.avi:library:2.1.3'</span></div></pre></td></tr></table></figure><h3 id="启动页倒计时"><a href="#启动页倒计时" class="headerlink" title="启动页倒计时"></a>启动页倒计时</h3><h3 id="首次启动可以滑动"><a href="#首次启动可以滑动" class="headerlink" title="首次启动可以滑动"></a>首次启动可以滑动</h3><p><a href="https://github.com/saiwu-bigkoo/Android-ConvenientBanner" target="_blank" rel="external">Android-ConvenientBanner</a> 全屏的广告轮播</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1486758206125-94d07f414b1c?auto=format&amp;amp;fit=crop&amp;amp;w=2700&amp;amp;q=60&amp;amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="慕课网" scheme="http://yoursite.com/categories/%E6%85%95%E8%AF%BE%E7%BD%91/"/>
    
      <category term="Android 通用框架设计与完整电商 APP 开发" scheme="http://yoursite.com/categories/%E6%85%95%E8%AF%BE%E7%BD%91/Android-%E9%80%9A%E7%94%A8%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%8C%E6%95%B4%E7%94%B5%E5%95%86-APP-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android 通用框架" scheme="http://yoursite.com/tags/Android-%E9%80%9A%E7%94%A8%E6%A1%86%E6%9E%B6/"/>
    
      <category term="未解决的 bug" scheme="http://yoursite.com/tags/%E6%9C%AA%E8%A7%A3%E5%86%B3%E7%9A%84-bug/"/>
    
  </entry>
  
  <entry>
    <title>慕课网 - 懒人必备之 Android 效率开发框架</title>
    <link href="http://yoursite.com/2017/10/16/imooc-Android-Framework-video-8302/"/>
    <id>http://yoursite.com/2017/10/16/imooc-Android-Framework-video-8302/</id>
    <published>2017-10-16T02:57:38.000Z</published>
    <updated>2017-11-01T06:48:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1484151709479-3996843263cf?auto=format&amp;fit=crop&amp;w=2700&amp;q=60&amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D" alt=""></p><a id="more"></a><h2 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架"></a>什么是框架</h2><blockquote><p>框架是地基，地基打的好，不管业务层有多大的变化，都不会影响到正常的开发.</p><p>不用框架，理论上讲是可以的，但是开发成本就变高了，很多集成服务要自己搭建</p><p>Android 中哪些可以抽象成为框架的：</p><ol><li>网络模块</li><li>图片缓存模块</li><li>数据库模块</li><li>UI 基础</li></ol><p>把这些抽出来之后，只要写业务层就好了。</p></blockquote><h2 id="AndroidAnnotation"><a href="#AndroidAnnotation" class="headerlink" title="AndroidAnnotation"></a>AndroidAnnotation</h2><blockquote><p><a href="http://androidannotations.org/" target="_blank" rel="external">AndroidAnnotation 官网</a></p></blockquote><p>AndroidAnnotation 是基于注解的标签库，<a href="https://github.com/androidannotations/androidannotations/wiki/AvailableAnnotations" target="_blank" rel="external">所有标签</a>。</p><h3 id="AS-配置androidannotations"><a href="#AS-配置androidannotations" class="headerlink" title="AS 配置androidannotations"></a>AS 配置androidannotations</h3><p>app/build.gradle:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def AAVersion = <span class="string">'4.3.0'</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line"><span class="function">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></span></div><div class="line"><span class="function"><span class="params">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></span></span></div><div class="line"><span class="function"><span class="params">    &#125;)</span></span></div><div class="line"><span class="function">    compile 'com.android.support:appcompat-v7:25.3.1'</span></div><div class="line"><span class="function">    compile 'com.android.support.constraint:constraint-layout:1.0.1'</span></div><div class="line"><span class="function">    testCompile 'junit:junit:4.12'</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="comment">//androidannotations 注解标签库</span></span></div><div class="line"><span class="function">    annotationProcessor "org.androidannotations:androidannotations:$AAVersion"</span></div><div class="line"><span class="function">    compile "org.androidannotations:androidannotations-api:$AAVersion"</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure><p>AndroidManifest.xml 中每个使用 androidAnnotations 的 Activity 名字后面都要添加_</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">       android:name=<span class="string">".MainActivity_"</span></div><div class="line">       android:label=<span class="string">"FirstTest"</span>&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure><blockquote><p>.MainActivity<em> 为什么要加 </em> ？</p><p>是 androidAnnotations ，在处理的过程中，生成的 .MainActivity_ 的 Activity。</p></blockquote><p>参考了：<a href="http://www.cnblogs.com/l2rf/p/4971825.html" target="_blank" rel="external">http://www.cnblogs.com/l2rf/p/4971825.html</a></p><p><a href="http://blog.csdn.net/xx326664162/article/details/68490059" target="_blank" rel="external">http://blog.csdn.net/xx326664162/article/details/68490059</a></p><p><a href="http://blog.csdn.net/doris_d/article/details/52634450" target="_blank" rel="external">http://blog.csdn.net/doris_d/article/details/52634450</a></p><p><a href="http://www.cnblogs.com/caobotao/p/5138935.html" target="_blank" rel="external">http://www.cnblogs.com/caobotao/p/5138935.html</a></p><p><a href="http://blog.csdn.net/caiwenfeng_for_23/article/details/45801151" target="_blank" rel="external">http://blog.csdn.net/caiwenfeng_for_23/article/details/45801151</a></p><p><a href="https://github.com/androidannotations/androidannotations/blob/master/examples/gradle/build.gradle" target="_blank" rel="external">https://github.com/androidannotations/androidannotations/blob/master/examples/gradle/build.gradle</a></p><p>没搞好，报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Process: com.ning.helloworld, PID: <span class="number">14359</span></div><div class="line">                                                                    java.lang.RuntimeException: Unable to start activity ComponentInfo&#123;com.ning.helloworld/com.ning.helloworld.MainActivity_&#125;: java.lang.NullPointerException: Attempt to invoke virtual method <span class="string">'void android.widget.Button.setOnClickListener(android.view.View$OnClickListener)'</span> on a <span class="keyword">null</span> object reference</div><div class="line">                                                                        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="number">2470</span>)</div><div class="line">                                                                        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">2532</span>)</div><div class="line">                                                                        at android.app.ActivityThread.access$<span class="number">800</span>(ActivityThread.java:<span class="number">169</span>)</div><div class="line">                                                                        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">1421</span>)</div><div class="line">                                                                        at android.os.Handler.dispatchMessage(Handler.java:<span class="number">111</span>)</div><div class="line">                                                                        at android.os.Looper.loop(Looper.java:<span class="number">194</span>)</div><div class="line">                                                                        at android.app.ActivityThread.main(ActivityThread.java:<span class="number">5556</span>)</div><div class="line">                                                                        at java.lang.reflect.Method.invoke(Native Method)</div><div class="line">                                                                        at java.lang.reflect.Method.invoke(Method.java:<span class="number">372</span>)</div><div class="line">                                                                        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">967</span>)</div><div class="line">                                                                        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">762</span>)</div><div class="line">                                                                     Caused by: java.lang.NullPointerException: Attempt to invoke virtual method <span class="string">'void android.widget.Button.setOnClickListener(android.view.View$OnClickListener)'</span> on a <span class="keyword">null</span> object reference</div><div class="line">                                                                        at com.ning.helloworld.MainActivity.onCreate(MainActivity.java:<span class="number">67</span>)</div><div class="line">                                                                        at com.ning.helloworld.MainActivity_.onCreate(MainActivity_.java:<span class="number">33</span>)</div><div class="line">                                                                        at android.app.Activity.performCreate(Activity.java:<span class="number">5975</span>)</div><div class="line">                                                                        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:<span class="number">1111</span>)</div><div class="line">                                                                        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="number">2423</span>)</div><div class="line">                                                                        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">2532</span>) </div><div class="line">                                                                        at android.app.ActivityThread.access$<span class="number">800</span>(ActivityThread.java:<span class="number">169</span>) </div><div class="line">                                                                        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">1421</span>) </div><div class="line">                                                                        at android.os.Handler.dispatchMessage(Handler.java:<span class="number">111</span>) </div><div class="line">                                                                        at android.os.Looper.loop(Looper.java:<span class="number">194</span>) </div><div class="line">                                                                        at android.app.ActivityThread.main(ActivityThread.java:<span class="number">5556</span>) </div><div class="line">                                                                        at java.lang.reflect.Method.invoke(Native Method) </div><div class="line">                                                                        at java.lang.reflect.Method.invoke(Method.java:<span class="number">372</span>) </div><div class="line">                                                                        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">967</span>) </div><div class="line">                                                                        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">762</span>)</div></pre></td></tr></table></figure><h3 id="annotation-的使用"><a href="#annotation-的使用" class="headerlink" title="annotation  的使用"></a>annotation  的使用</h3><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/dxlqz9" alt="注解的使用"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/IHXb0Y" alt="注解的使用"></p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/AmzwZs" alt="注解的使用"></p><p>看到这：</p><p><img src="https://cdn-std.dprcdn.net/files/acc_587316/Vhqy9Z" alt="imooc"></p><p><a href="http://www.imooc.com/learn/431" target="_blank" rel="external">课程网址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1484151709479-3996843263cf?auto=format&amp;amp;fit=crop&amp;amp;w=2700&amp;amp;q=60&amp;amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3D&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="慕课网" scheme="http://yoursite.com/categories/%E6%85%95%E8%AF%BE%E7%BD%91/"/>
    
      <category term="懒人必备之 Android 效率开发框架" scheme="http://yoursite.com/categories/%E6%85%95%E8%AF%BE%E7%BD%91/%E6%87%92%E4%BA%BA%E5%BF%85%E5%A4%87%E4%B9%8B-Android-%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="未解决的 bug" scheme="http://yoursite.com/tags/%E6%9C%AA%E8%A7%A3%E5%86%B3%E7%9A%84-bug/"/>
    
      <category term="Android 框架" scheme="http://yoursite.com/tags/Android-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 第一行代码</title>
    <link href="http://yoursite.com/2017/10/10/Android-%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2017/10/10/Android-第一行代码/</id>
    <published>2017-10-10T02:37:41.000Z</published>
    <updated>2017-10-14T07:59:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1505538034984-f4cdc7503011?dpr=1&amp;auto=compress,format&amp;fit=crop&amp;w=1350&amp;h=&amp;q=80&amp;cs=tinysrgb&amp;crop=" alt="Android"></p><a id="more"></a><h2 id="Chapter-1-入门"><a href="#Chapter-1-入门" class="headerlink" title="Chapter 1  入门"></a>Chapter 1  入门</h2><h3 id="Android-各版本对应的-API"><a href="#Android-各版本对应的-API" class="headerlink" title="Android 各版本对应的 API"></a>Android 各版本对应的 API</h3><table><thead><tr><th>版本号</th><th>系统代号</th><th>API</th></tr></thead><tbody><tr><td>4.0.3 - 4.0.4</td><td>Ice Cream Sandwich</td><td>15</td></tr><tr><td>4.1.x   4.2.x   4.3</td><td>Jelly Bean</td><td>16  17  18</td></tr><tr><td>4.4</td><td>KitKat</td><td>19</td></tr><tr><td>5.0  5.1</td><td>Lollipop</td><td>21  22</td></tr><tr><td>6.0</td><td>Marshmallow</td><td>23</td></tr><tr><td>7.0  7.1</td><td>Nougat</td><td>24  25</td></tr><tr><td>8.0</td><td>Oreo</td><td>26</td></tr></tbody></table><h3 id="Android-程序的项目结构"><a href="#Android-程序的项目结构" class="headerlink" title="Android 程序的项目结构"></a>Android 程序的项目结构</h3><p><img src="https://dr5mo5s7lqrtc.cloudfront.net/items/3w002Z2B2X121y3o1p2d/%5B61c79e4b7e518b02860ca01bb09676c1%5D_Image%25202017-10-10%2520at%252011.21.29%2520%25E4%25B8%258A%25E5%258D%2588.png?X-CloudApp-Visitor-Id=2843916&amp;v=777f6d76" alt="项目结构"></p><ul><li>gradle 下包含了 gradle wrapper 的配置文件。</li><li>gradle.properties 是全局的 gradle 配置文件。这里配置的属性将会影响到项目中所有的 gradle 编译脚本。</li><li>app 是开发的主要工作目录。</li><li>其他都是些 AS 自动生成的文件，不需要修改。</li><li>.gitignore 文件，记录不需要提交到 Git 的东西，节省 Git 服务器资源和带宽、减少冲突。只在项目的根目录里创建这个文件就好，一般的 model 不需要这个文件。（慕课网 - Android 通用架构设计与完整电商App开发 学到的）</li></ul><h3 id="app下的目录结构"><a href="#app下的目录结构" class="headerlink" title="app下的目录结构"></a>app下的目录结构</h3><ol><li><p>build 里是编译时自动生成的文件，不需要改动。</p></li><li><p><strong>libs</strong> 里放的是你项目中使用到的第三方 <strong>jar</strong> 包，放在这里的 jar 包会被自动添加进构建路径中去。 </p></li><li><p>androidTest 是用来编写 Android Test 测试用例的，可以进行自动化测试</p></li><li><p><strong>java </strong> 里是放 Java 代码的地方。</p></li><li><p><strong>res</strong> 里 <strong>图片</strong>放在 <strong>drawable</strong> 中，<strong>布局</strong>放在 <strong>layout</strong> 中，<strong>字符</strong>放在 <strong>values</strong> 中，字符包括字符串、样式、颜色等配置，应用图标放在 mipmap 。                            </p><p> <strong>res 里的资源有以下两种引用方式：</strong>                                                                          </p><blockquote><p> 在代码中：通过 R.资源所在最近文件夹.资源名称，如 R.string.hellp_world    在 xml 中：通过 @资源所在最近文件夹/资源名称，如 @string/hello_wrold</p></blockquote></li><li><p><strong>AndroidManifest.xml</strong> 是整个 Android 项目的配置文件，四大组件都要在此注册，这个文件给应用程序添加<strong>权限声明</strong>。</p></li><li><p>test 里用来编写 Unit Test 测试用例，是自动化测试的另一种方式。</p></li><li><p><strong>build.gradle</strong> 是 app 模块的 <strong>gradle 构建脚本</strong>。</p></li><li><p>proguard-rules.pro 用于指定项目代码的混淆规则。</p></li></ol><h3 id="app-里的-build-gradle"><a href="#app-里的-build-gradle" class="headerlink" title="app 里的 build.gradle"></a>app 里的 build.gradle</h3><h3 id="Android-的日志工具-Log"><a href="#Android-的日志工具-Log" class="headerlink" title="Android 的日志工具 Log"></a>Android 的日志工具 Log</h3><ol><li>Log.v()</li><li>Log.d()</li><li>Log.i() :important，分析用户行为的数据。</li><li>Log.w()</li><li>Log.e()</li></ol><p>1 级别最低，5 级别最高。每次打印日志时，会把此级别以及此级别以上的日志显示出来，使用关键字过滤，支持正则表达式。</p><p>Log.d() 方法会传入 2 个参数，第一个是 tag ，一般传入当前类名，用于打印信息过滤，第二个是 msg ，即要打印的具体内容。</p><p>AS 快捷键：</p><p>在 onCreate() 方法的外面，输入 logt + tab ，生成一个以当前类名作为值的 TAG 常量；</p><p>logd + tab </p><p>logi + tab</p><p>logw + tab</p><p>loge + tab</p><p>logt + tab</p><h2 id="Chapter-2-活动"><a href="#Chapter-2-活动" class="headerlink" title="Chapter 2  活动"></a>Chapter 2  活动</h2><h3 id="活动的注册"><a href="#活动的注册" class="headerlink" title="活动的注册"></a>活动的注册</h3><h3 id="在活动中使用-Toast"><a href="#在活动中使用-Toast" class="headerlink" title="在活动中使用 Toast"></a>在活动中使用 Toast</h3><h3 id="在活动中添加-Menu-P38"><a href="#在活动中添加-Menu-P38" class="headerlink" title="在活动中添加 Menu P38"></a>在活动中添加 Menu P38</h3><h3 id="销毁活动-finish（）"><a href="#销毁活动-finish（）" class="headerlink" title="销毁活动 finish（）"></a>销毁活动 finish（）</h3><h3 id="使用-Intent"><a href="#使用-Intent" class="headerlink" title="使用 Intent"></a>使用 Intent</h3><blockquote><p>Intent 是各组件之间进行交互的重要方式。它有两个作用：</p><ol><li>指明当前组件想要执行的动作。即意图，如：启动活动、服务、发送广播。</li><li>在不同组件之间传递数据。</li></ol></blockquote><p>Intent 有<strong>显式</strong>和<strong>隐式</strong>两种。</p><h3 id="更多隐式-Intent-的用法"><a href="#更多隐式-Intent-的用法" class="headerlink" title="更多隐式 Intent 的用法"></a>更多隐式 Intent 的用法</h3><ol><li>使用 Intent 显示网页</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">intent.setData(Uri.parse(<span class="string">"http://www.wangzhuningecnu.github.io"</span>));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure><ol><li>使用 Intent 指定其他协议，如 geo 地理位置，tel 拨打电话</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL);</div><div class="line">intent.setData(Uri.parse(<span class="string">"tel:10000"</span>));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1505538034984-f4cdc7503011?dpr=1&amp;amp;auto=compress,format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;h=&amp;amp;q=80&amp;amp;cs=tinysrgb&amp;amp;crop=&quot; alt=&quot;Android&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="第一行代码" scheme="http://yoursite.com/categories/Android/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="第一行代码" scheme="http://yoursite.com/tags/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    
      <category term="任务清单" scheme="http://yoursite.com/tags/%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java</title>
    <link href="http://yoursite.com/2017/10/09/Effective-Java/"/>
    <id>http://yoursite.com/2017/10/09/Effective-Java/</id>
    <published>2017-10-09T02:42:58.000Z</published>
    <updated>2017-10-09T06:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1437422061949-f6efbde0a471?dpr=1&amp;auto=compress,format&amp;fit=crop&amp;w=1350&amp;h=&amp;q=80&amp;cs=tinysrgb&amp;crop=" alt="Nature"></p><a id="more"></a><h2 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h2><h3 id="本书基本原则"><a href="#本书基本原则" class="headerlink" title="本书基本原则"></a>本书基本原则</h3><ol><li>清晰性、简洁性：模块的用户永远不应被模块的行为迷惑</li><li>模块要尽可能小，但又不能太小（模块 Module 是指任何可重用的组件，包括单个方法，到多个包的复杂系统）</li><li>代码应该被重用，而不是被拷贝</li><li>模块之间的依赖性应该尽可能降到最小</li><li>错误应该尽早被检测出来，最好是在编译时</li></ol><p>写出清晰、正确、可用、健壮、灵活和可维护的程序来。如果你能做到这一点，那么获得所需的性能就比较简单了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1437422061949-f6efbde0a471?dpr=1&amp;amp;auto=compress,format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;h=&amp;amp;q=80&amp;amp;cs=tinysrgb&amp;amp;crop=&quot; alt=&quot;Nature&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Effective Java" scheme="http://yoursite.com/categories/Java/Effective-Java/"/>
    
    
      <category term="任务清单" scheme="http://yoursite.com/tags/%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Primary Question</title>
    <link href="http://yoursite.com/2017/10/08/Java-Primary-Question/"/>
    <id>http://yoursite.com/2017/10/08/Java-Primary-Question/</id>
    <published>2017-10-08T03:50:07.000Z</published>
    <updated>2017-12-05T13:15:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1502083728181-687546e77613?dpr=1&amp;auto=compress,format&amp;fit=crop&amp;w=1350&amp;h=&amp;q=80&amp;cs=tinysrgb&amp;crop=" alt="nature"></p><a id="more"></a><h2 id="引用数组的赋值问题"><a href="#引用数组的赋值问题" class="headerlink" title="引用数组的赋值问题"></a>引用数组的赋值问题</h2><p>元素对象为 Student 类，数组元素对象为什么不能这样声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Student[] arrStudent = <span class="keyword">new</span> Student[]&#123;&#123;<span class="string">"D"</span>,<span class="number">90</span>&#125; , &#123;<span class="string">"C"</span>,<span class="number">100</span>&#125; , &#123;<span class="string">"B"</span>,<span class="number">95</span>&#125; , &#123;<span class="string">"A"</span>,<span class="number">95</span>&#125;&#125;;</div><div class="line"></div><div class="line">Student[] arrStudent = <span class="keyword">new</span> Student[]()&#123;&#123;<span class="string">"D"</span>,<span class="number">90</span>&#125; , &#123;<span class="string">"C"</span>,<span class="number">100</span>&#125; , &#123;<span class="string">"B"</span>,<span class="number">95</span>&#125; , &#123;<span class="string">"A"</span>,<span class="number">95</span>&#125;&#125;;</div></pre></td></tr></table></figure><p>Integer 的包装类就可以这样声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//测试 Integer</span></div><div class="line">Integer arrInteger[] = &#123;<span class="number">10</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line">SelectionSort.selectionSort(arrInteger);</div><div class="line"><span class="keyword">for</span> (Integer i : arrInteger )&#123;</div><div class="line">System.out.print(i + <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line"></div><div class="line"><span class="comment">//测试 Double</span></div><div class="line">Double arrDouble[] = &#123;<span class="number">4.3</span>,<span class="number">4.2</span>,<span class="number">3.3</span>,<span class="number">2.1</span>,<span class="number">1.0</span>&#125;;</div><div class="line">SelectionSort.selectionSort(arrDouble);</div><div class="line"><span class="keyword">for</span> (Double double1 : arrDouble) &#123;</div><div class="line">System.out.print(double1 + <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line"></div><div class="line"><span class="comment">//测试 String</span></div><div class="line">String[] arrString = &#123;<span class="string">"D"</span>,<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>&#125;;</div><div class="line">SelectionSort.selectionSort(arrString);</div><div class="line"><span class="keyword">for</span> (String string : arrString) &#123;</div><div class="line">System.out.print(string+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div></pre></td></tr></table></figure><p>引用类型的数组不可以在声明时赋值吗？</p><p>引用类型数组怎么定义的？</p><h2 id="assert-是保证什么的东东，不是类，也不是静态方法，那应该是Object里的-但是没有"><a href="#assert-是保证什么的东东，不是类，也不是静态方法，那应该是Object里的-但是没有" class="headerlink" title="assert 是保证什么的东东，不是类，也不是静态方法，那应该是Object里的,但是没有"></a>assert 是保证什么的东东，不是类，也不是静态方法，那应该是Object里的,但是没有</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> randomLeft &lt;= randomRight;</div></pre></td></tr></table></figure><p>这句能保证的是，randomLeft 的值 如果大于 randomRight 的值，则会把他们两个调换。不会报 true 或 false ，也不会报错，程序还是能运行。</p><h2 id="泛型泛型啊-Comparable-Object-到底用哪个？"><a href="#泛型泛型啊-Comparable-Object-到底用哪个？" class="headerlink" title="泛型泛型啊 Comparable[] Object[] 到底用哪个？"></a>泛型泛型啊 Comparable[] Object[] 到底用哪个？</h2><h2 id="Foreach-用法注意"><a href="#Foreach-用法注意" class="headerlink" title="Foreach 用法注意"></a>Foreach 用法注意</h2><p>若是给数组赋值，则不能用 Foreach ，因为 foreach 只是把值拷贝给一个临时变量，并不会赋值给数组本身。</p><p>错误示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Integer integer : arr) &#123;</div><div class="line">integer = <span class="keyword">new</span> Integer((<span class="keyword">int</span>)(Math.random()*(randomRight-randomLeft+<span class="number">1</span>)+randomLeft));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>确实生成了随机数给 integer,但并没有给数组。</p><h2 id="Java的反射机制"><a href="#Java的反射机制" class="headerlink" title="Java的反射机制"></a>Java的反射机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 测试sortClassName所对应的排序算法，对arr数组排序，所得到结果的正确性和算法运行时间</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">(String sortClassName , Comparable[] arr)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            Class sortClass = Class.forName(sortClassName);</div><div class="line"></div><div class="line">            Method sortMethod = sortClass.getMethod(<span class="string">"sort"</span> ,<span class="keyword">new</span> Class[]&#123;Comparable[].class&#125;);</div><div class="line"></div><div class="line">            Object[] params = <span class="keyword">new</span> Object[]&#123;arr&#125;;</div><div class="line"></div><div class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">            sortMethod.invoke(<span class="keyword">null</span>,params); <span class="comment">//为啥是params，不是arr</span></div><div class="line"></div><div class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(arr)</span></span>;</div><div class="line"></div><div class="line">            System.out.println(sortClass.getSimpleName() + <span class="string">" : "</span> + (endTime - startTime ) + <span class="string">"ms"</span>);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="方法返回值"><a href="#方法返回值" class="headerlink" title="方法返回值"></a>方法返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Integer arr[])</span></span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (arr[i+<span class="number">1</span>] &lt; arr[i])&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//        return true;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable arr[])</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (arr[i+<span class="number">1</span>] .compareTo(arr[i]) &lt; <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//        return true;</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>return true; 注释掉后，报错，missing return statement。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1502083728181-687546e77613?dpr=1&amp;amp;auto=compress,format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;h=&amp;amp;q=80&amp;amp;cs=tinysrgb&amp;amp;crop=&quot; alt=&quot;nature&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Java 问题贴" scheme="http://yoursite.com/categories/Java/Java-%E9%97%AE%E9%A2%98%E8%B4%B4/"/>
    
    
      <category term="Java 问题贴" scheme="http://yoursite.com/tags/Java-%E9%97%AE%E9%A2%98%E8%B4%B4/"/>
    
  </entry>
  
  <entry>
    <title>sortAlgorithm</title>
    <link href="http://yoursite.com/2017/10/07/imooc-SortAlgorithm/"/>
    <id>http://yoursite.com/2017/10/07/imooc-SortAlgorithm/</id>
    <published>2017-10-07T03:56:40.000Z</published>
    <updated>2017-12-13T14:59:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1431794062232-2a99a5431c6c?dpr=1&amp;auto=compress,format&amp;fit=crop&amp;w=1350&amp;h=&amp;q=80&amp;cs=tinysrgb&amp;crop=" alt="nature"></p><a id="more"></a><h2 id="最简单的-—-选择排序"><a href="#最简单的-—-选择排序" class="headerlink" title="最简单的 — 选择排序"></a>最简单的 — 选择排序</h2><blockquote><p>选择排序：每次选择剩余元素中的最小的那个，与当前位置互换。</p><p>选择排序不能中断，插入排序根据条件可能中断</p></blockquote><h3 id="选择排序动态图"><a href="#选择排序动态图" class="headerlink" title="选择排序动态图"></a>选择排序动态图</h3><p><img src="https://cl.ly/2U2q3x2f3t0Q/Screen%20Recording%202017-10-08%20at%2009.18%20%E4%B8%8A%E5%8D%88.gif" alt="选择排序示意图"></p><h3 id="选择排序示例代码"><a href="#选择排序示例代码" class="headerlink" title="选择排序示例代码"></a>选择排序示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SelectionSort</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//此算法类不允许产生实例</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line"><span class="comment">//找到剩余元素（下标为 [i，arr.length)中的元素）中最小元素的下标</span></div><div class="line"><span class="keyword">int</span> min = i;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</div><div class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</div><div class="line">min = j;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">swap(arr, min, i);<span class="comment">//将选择出的最小元素与当前位置元素 arr[i] 交换</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n : arr) &#123;</div><div class="line">System.out.print(n +<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> temp = arr[n];</div><div class="line">arr[n] = arr[m];</div><div class="line">arr[m] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">10</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line">SelectionSort.selectionSort(arr);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</div><div class="line">System.out.print(i + <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输出：</div><div class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">9</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">9</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></div></pre></td></tr></table></figure><h3 id="加了泛型的选择排序"><a href="#加了泛型的选择排序" class="headerlink" title="加了泛型的选择排序"></a>加了泛型的选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ning;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> grade;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> grade)</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line"><span class="keyword">this</span>.grade = grade;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义Student的compareTo函数</span></div><div class="line">    <span class="comment">// 如果分数相等，则按照名字的字母序排序</span></div><div class="line">    <span class="comment">// 如果分数不等，则分数高的靠前</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.grade &gt; o.grade) &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.grade &lt; o.grade) &#123;</div><div class="line"><span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(o.name);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="string">"Student: "</span> + <span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.grade;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ning;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.management.MemoryManagerMXBean;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SelectionSort</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//算法类不允许产生实例</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(Comparable[] arr)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line"><span class="comment">//找到 [i，arr.length)中 最小元素的下标</span></div><div class="line"><span class="keyword">int</span> min = i;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</div><div class="line"><span class="comment">//使用compareTo方法比较两个Comparable对象的大小</span></div><div class="line"><span class="keyword">if</span> (arr[j].compareTo(arr[min]) &lt; <span class="number">0</span>) &#123;</div><div class="line">min = j;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">swap(arr, min, i);<span class="comment">//将选择出的最小元素与 i 交换</span></div><div class="line"><span class="keyword">for</span> (Object n : arr) &#123;</div><div class="line">System.out.print(n +<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object arr[],<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">Object temp = arr[n];</div><div class="line">arr[n] = arr[m];</div><div class="line">arr[m] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//测试 Integer</span></div><div class="line">Integer arrInteger[] = &#123;<span class="number">10</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line">SelectionSort.selectionSort(arrInteger);</div><div class="line"><span class="keyword">for</span> (Integer i : arrInteger )&#123;</div><div class="line">System.out.print(i + <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line"></div><div class="line"><span class="comment">//测试 Double</span></div><div class="line">Double arrDouble[] = &#123;<span class="number">4.3</span>,<span class="number">4.2</span>,<span class="number">3.3</span>,<span class="number">2.1</span>,<span class="number">1.0</span>&#125;;</div><div class="line">SelectionSort.selectionSort(arrDouble);</div><div class="line"><span class="keyword">for</span> (Double double1 : arrDouble) &#123;</div><div class="line">System.out.print(double1 + <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line"></div><div class="line"><span class="comment">//测试 String</span></div><div class="line">String[] arrString = &#123;<span class="string">"D"</span>,<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>&#125;;</div><div class="line">SelectionSort.selectionSort(arrString);</div><div class="line"><span class="keyword">for</span> (String string : arrString) &#123;</div><div class="line">System.out.print(string+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line"></div><div class="line"><span class="comment">//测试自定义的 Student 类</span></div><div class="line">Student[] arrStudent = <span class="keyword">new</span> Student[<span class="number">3</span>];</div><div class="line">arrStudent[<span class="number">0</span>] = <span class="keyword">new</span> Student(<span class="string">"wang"</span>,<span class="number">100</span>);</div><div class="line">arrStudent[<span class="number">1</span>] = <span class="keyword">new</span> Student(<span class="string">"zhang"</span>,<span class="number">98</span>);</div><div class="line">arrStudent[<span class="number">2</span>] = <span class="keyword">new</span> Student(<span class="string">"xiang"</span>,<span class="number">79</span>);</div><div class="line">SelectionSort.selectionSort(arrStudent);</div><div class="line"><span class="keyword">for</span> (Student student : arrStudent) &#123;</div><div class="line">System.out.print(student + <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输出结果：</div><div class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">9</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">9</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </div><div class="line"><span class="number">1.0</span> <span class="number">4.2</span> <span class="number">3.3</span> <span class="number">2.1</span> <span class="number">4.3</span> </div><div class="line"><span class="number">1.0</span> <span class="number">2.1</span> <span class="number">3.3</span> <span class="number">4.2</span> <span class="number">4.3</span> </div><div class="line"><span class="number">1.0</span> <span class="number">2.1</span> <span class="number">3.3</span> <span class="number">4.2</span> <span class="number">4.3</span> </div><div class="line"><span class="number">1.0</span> <span class="number">2.1</span> <span class="number">3.3</span> <span class="number">4.2</span> <span class="number">4.3</span> </div><div class="line"><span class="number">1.0</span> <span class="number">2.1</span> <span class="number">3.3</span> <span class="number">4.2</span> <span class="number">4.3</span> </div><div class="line"><span class="number">1.0</span> <span class="number">2.1</span> <span class="number">3.3</span> <span class="number">4.2</span> <span class="number">4.3</span> </div><div class="line">A C B D </div><div class="line">A B C D </div><div class="line">A B C D </div><div class="line">A B C D </div><div class="line">A B C D </div><div class="line">Student: xiang <span class="number">79</span> Student: zhang <span class="number">98</span> Student: wang <span class="number">100</span> </div><div class="line">Student: xiang <span class="number">79</span> Student: zhang <span class="number">98</span> Student: wang <span class="number">100</span> </div><div class="line">Student: xiang <span class="number">79</span> Student: zhang <span class="number">98</span> Student: wang <span class="number">100</span> </div><div class="line">Student: xiang <span class="number">79</span> Student: zhang <span class="number">98</span> Student: wang <span class="number">100</span></div></pre></td></tr></table></figure><h3 id="随机生成算法测试用例的-SortTestHelper-类"><a href="#随机生成算法测试用例的-SortTestHelper-类" class="headerlink" title="随机生成算法测试用例的 SortTestHelper 类"></a>随机生成算法测试用例的 SortTestHelper 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ning;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTestHelper</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//SortTestHelper 不允许产生任何实例</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SortTestHelper</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//生成 n 个元素的随机数组，每个随机数的范围是【randomLeft，randomRight】</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateRandomArray(<span class="keyword">int</span> n,<span class="keyword">int</span> randomLeft,<span class="keyword">int</span> randomRight) &#123;</div><div class="line">        <span class="keyword">assert</span> randomLeft &lt;= randomRight;</div><div class="line">Integer[] arr = <span class="keyword">new</span> Integer[n];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length ; i++) &#123;</div><div class="line">arr[i] = <span class="keyword">new</span> Integer((<span class="keyword">int</span>)(Math.random()*(randomRight-randomLeft+<span class="number">1</span>)+randomLeft));</div><div class="line"><span class="comment">//System.out.println(arr[i]);</span></div><div class="line">&#125;</div><div class="line">SortTestHelper.printArray(arr);</div><div class="line"><span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(Object[] arr)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (Object o : arr) &#123;</div><div class="line">System.out.print(o + <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意：数组赋值的时候，不能使用 foreach 写法，否则只是赋值给了局部变量，并没有赋值给数组本身。</p><p>SortTestHelper 类的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//测试 Integer</span></div><div class="line"><span class="keyword">int</span> n = <span class="number">10000</span>;</div><div class="line">Integer arrInteger[] = SortTestHelper.generateRandomArray(n, <span class="number">0</span>, n);</div><div class="line">SelectionSort.selectionSort(arrInteger);</div><div class="line">SortTestHelper.printArray(arrInteger);</div></pre></td></tr></table></figure><h3 id="在-SortTestHelper-类中加入测试算法的性能的代码"><a href="#在-SortTestHelper-类中加入测试算法的性能的代码" class="headerlink" title="在 SortTestHelper 类中加入测试算法的性能的代码"></a>在 SortTestHelper 类中加入测试算法的性能的代码</h3><p>SortTestHelper 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> bobo.algo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.Class;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTestHelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//······</span></div><div class="line"></div><div class="line">    <span class="comment">// 判断arr数组是否有序</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] arr)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length - <span class="number">1</span> ; i ++ )  <span class="comment">//这里一定是arr.length - 1，否则越界</span></div><div class="line">            <span class="keyword">if</span>( arr[i].compareTo(arr[i+<span class="number">1</span>]) &gt; <span class="number">0</span> )</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试sortClassName所对应的排序算法排序arr数组所得到结果的正确性和算法运行时间</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">(String sortClassName, Comparable[] arr)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 通过Java的反射机制，通过排序的类名，运行排序函数</span></div><div class="line">        <span class="comment">// * 依然是，使用反射机制并不是这个课程的重点, 大家也完全可以使用自己的方式书写代码, 最终只要能够测试出自己书写的算法的效率即可</span></div><div class="line">        <span class="comment">// * 推荐大家阅读我在问答区向大家分享的一个学习心得: 【学习心得分享】请大家抓大放小，不要纠结于C++语言的语法细节</span></div><div class="line">        <span class="comment">// * 链接: http://coding.imooc.com/learn/questiondetail/4100.html</span></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">// 通过sortClassName获得排序函数的Class对象</span></div><div class="line">            Class sortClass = Class.forName(sortClassName);</div><div class="line">            <span class="comment">// 通过排序函数的Class对象获得排序方法</span></div><div class="line">            Method sortMethod = sortClass.getMethod(<span class="string">"sort"</span>,<span class="keyword">new</span> Class[]&#123;Comparable[].class&#125;);</div><div class="line">            <span class="comment">// 排序参数只有一个，是可比较数组arr</span></div><div class="line">            Object[] params = <span class="keyword">new</span> Object[]&#123;arr&#125;;</div><div class="line"></div><div class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">            <span class="comment">// 调用排序函数</span></div><div class="line">            sortMethod.invoke(<span class="keyword">null</span>,params);</div><div class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">( arr )</span></span>;</div><div class="line"></div><div class="line">            System.out.println( sortClass.getSimpleName()+ <span class="string">" : "</span> + (endTime-startTime) + <span class="string">"ms"</span> );</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> bobo.algo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 我们的算法类不允许产生任何实例</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SelectionSort</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] arr)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> n = arr.length;</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )&#123;</div><div class="line">            <span class="comment">// 寻找[i, n)区间里的最小值的索引</span></div><div class="line">            <span class="keyword">int</span> minIndex = i;</div><div class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt; n ; j ++ )</div><div class="line">                <span class="comment">// 使用compareTo方法比较两个Comparable对象的大小</span></div><div class="line">                <span class="keyword">if</span>( arr[j].compareTo( arr[minIndex] ) &lt; <span class="number">0</span> )</div><div class="line">                    minIndex = j;</div><div class="line"></div><div class="line">            swap( arr , i , minIndex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        Object t = arr[i];</div><div class="line">        arr[i] = arr[j];</div><div class="line">        arr[j] = t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 测试排序算法辅助函数</span></div><div class="line">        <span class="keyword">int</span> N = <span class="number">10000</span>;</div><div class="line">        Integer[] arr = SortTestHelper.generateRandomArray(N, <span class="number">0</span>, N);</div><div class="line">        SortTestHelper.testSort(<span class="string">"bobo.algo.SelectionSort"</span>, arr);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输出结果：</div><div class="line">N = <span class="number">100</span> 时，排序数...SelectionSort: <span class="number">1</span>ms</div><div class="line">N = <span class="number">1000</span> 时，排序数...SelectionSort: <span class="number">12</span>ms</div><div class="line">N = <span class="number">10000</span> 时，排序数..SelectionSort: <span class="number">140</span>ms</div><div class="line">N = <span class="number">100000</span> 时，排序数.SelectionSort: <span class="number">11577</span>ms</div></pre></td></tr></table></figure><h2 id="同样-n²-的-—-插入排序"><a href="#同样-n²-的-—-插入排序" class="headerlink" title="同样 n² 的 — 插入排序"></a>同样 n² 的 — 插入排序</h2><blockquote><p>插入排序：把后面的元素，一个位置一个位置的往前，插入到合适的位置</p><p>插入排序像是一边摸牌，一边码牌；选择排序像是发牌完毕后，再码牌</p></blockquote><h3 id="插入排序动态图"><a href="#插入排序动态图" class="headerlink" title="插入排序动态图"></a>插入排序动态图</h3><p><img src="https://dr5mo5s7lqrtc.cloudfront.net/items/000U1Q3O0x2w2O1v0A0C/Screen%20Recording%202017-10-12%20at%2009.59%20%E4%B8%8B%E5%8D%88.gif?X-CloudApp-Visitor-Id=2843916&amp;v=17057a3b" alt="插入排序示意图"></p><h3 id="插入排序示例代码"><a href="#插入排序示例代码" class="headerlink" title="插入排序示例代码"></a>插入排序示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ning;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> </span>&#123;</div><div class="line"> <span class="comment">// 我们的算法类不允许产生任何实例</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InsertionSort</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable arr[])</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line"><span class="comment">// 寻找元素arr[i]合适的插入位置</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">1</span> ; j--) &#123;</div><div class="line"><span class="keyword">if</span> (arr[j].compareTo(arr[j-<span class="number">1</span>])&lt;<span class="number">0</span>) &#123;</div><div class="line">swap(arr,j,j-<span class="number">1</span>);</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] a,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">Object temp = a[m];</div><div class="line">a[m] = a[n];</div><div class="line">a[n] = temp;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="插入排序与选择排序的比较"><a href="#插入排序与选择排序的比较" class="headerlink" title="插入排序与选择排序的比较"></a>插入排序与选择排序的比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = <span class="number">100000</span>;</div><div class="line">Integer[] arr1 = SortTestHelper.generateRandomArray(n, <span class="number">0</span>, n);</div><div class="line">Integer[] arr2 = Arrays.copyOf(arr1, arr1.length);</div><div class="line"><span class="comment">//Java 中有赋值数组的方法，C++ 中没有</span></div><div class="line"></div><div class="line">SortTestHelper.testSort(<span class="string">"com.ning.SelectionSort"</span>, arr1);</div><div class="line">SortTestHelper.testSort(<span class="string">"com.ning.InsertionSort"</span>, arr2);</div><div class="line"></div><div class="line">结果：</div><div class="line">SelectionSort: <span class="number">14086</span>ms</div><div class="line">InsertionSort: <span class="number">15634</span>ms</div></pre></td></tr></table></figure><blockquote><p> 比较 SelectionSort 和 InsertionSort 两种排序算法的性能效率</p><p> 此时，插入排序比选择排序性能略低</p></blockquote><h2 id="插入排序的优化"><a href="#插入排序的优化" class="headerlink" title="插入排序的优化"></a>插入排序的优化</h2><blockquote><p>插入排序在元素本就在该位置时，会结束本次比较，按理说比不能中断的选择排序要快，但并非如此，为何？</p><p>因为插入排序在遍历的同时，也在不停交换，交换操作比比较更耗时，每次交换都有三次赋值的操作。</p></blockquote><h3 id="插入排序优化示意图"><a href="#插入排序优化示意图" class="headerlink" title="插入排序优化示意图"></a>插入排序优化示意图</h3><p><img src="https://dr5mo5s7lqrtc.cloudfront.net/items/253N3x2i042N0v3w0o2I/Screen%20Recording%202017-10-12%20at%2010.16%20%E4%B8%8B%E5%8D%88.gif?X-CloudApp-Visitor-Id=2843916&amp;v=6c7b0085" alt="插入排序优化示意图"></p><h3 id="插入排序优化示例代码"><a href="#插入排序优化示例代码" class="headerlink" title="插入排序优化示例代码"></a>插入排序优化示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xiang;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 项目名：     SelectionSort2</span></div><div class="line"><span class="comment"> * 包名：       com.xiang</span></div><div class="line"><span class="comment"> * 文件名：     InsertSort</span></div><div class="line"><span class="comment"> * Created by ning on 2017/12/1.</span></div><div class="line"><span class="comment"> * 描述：     优化后的插入排序</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] arr)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; arr.length ; i++)&#123;</div><div class="line"></div><div class="line"><span class="comment">//            寻找元素 arr[i] 合适的位置</span></div><div class="line">            Comparable e = arr[i];</div><div class="line"><span class="comment">//            保存元素 e 应该插入的位置</span></div><div class="line">            <span class="keyword">int</span> j;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (j = i ; j &gt; <span class="number">0</span> &amp;&amp; e.compareTo(arr[j-<span class="number">1</span>]) &lt; <span class="number">0</span>; j--)&#123;</div><div class="line"></div><div class="line">                arr[j] = arr[j-<span class="number">1</span>];</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            arr[j] = e;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> N = <span class="number">10000</span>;</div><div class="line">        Integer arr[] = SortTestHelper.generateAlmostOrderedArray(N,<span class="number">10</span>);</div><div class="line">        Integer arr2[] = Arrays.copyOf(arr,arr.length);</div><div class="line"></div><div class="line">        SortTestHelper.testSort(<span class="string">"com.xiang.SelectionSort"</span>,arr2);</div><div class="line">        SortTestHelper.testSort(<span class="string">"com.xiang.InsertSort"</span>,arr);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://d26dzxoao6i3hh.cloudfront.net/items/0d062A0V0w2K063Q3C2w/Image%202017-12-06%20at%2011.07.35%20%E4%B8%8B%E5%8D%88.png?v=4d06bf00" alt="结果1"></p><p><img src="https://d26dzxoao6i3hh.cloudfront.net/items/112k1I3L3U271X3o0j3Q/Image%202017-12-06%20at%2011.04.36%20%E4%B8%8B%E5%8D%88.png?v=17185e08" alt="结果2"></p><p>可以看到，使用优化过后的插入排序，当对几乎有序的数组进行排序时，老师的结果是：插入排序的速度是选择排序的1000倍。我得到的大多数结果是插入排序的速度是选择排序的100倍。</p><blockquote><p>事实上，对于近乎有序的数组，使用优化过后的插入排序甚至比 nlogn 的排序算法更快。</p><p>在最优的情况下，对于一个完全有序的数组，插入排序的时间复杂度达到了 O（n），这是插入排序的一个重要的性质，也是它作为其他复杂排序子过程的原因。</p></blockquote><h2 id="选择排序和插入排序的比较"><a href="#选择排序和插入排序的比较" class="headerlink" title="选择排序和插入排序的比较"></a>选择排序和插入排序的比较</h2><ul><li>选择排序：O（n^2）, 不能中断</li><li>插入排序：O（n^2)  ，可以中断，最优情况：O (n) ，比 nlogn 还要快，最差情况 O（n^2），是希尔排序的子过程，希尔排序是 O（n^(3/2)），虽然比 O（nlogn）稍大一些，但是他的实现较为简单，和插入排序一脉相承。</li><li>冒泡排序：</li></ul><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ning;</div><div class="line"><span class="comment">//这是冒泡排序</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">BubbleSort</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] array)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>+i; j &lt; array.length; j++) &#123;</div><div class="line"><span class="keyword">if</span> (array[j].compareTo(array[i]) &lt; <span class="number">0</span>) &#123;</div><div class="line">Comparable temp = array[j];</div><div class="line">array[j] = array[i];</div><div class="line">array[i] = temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">输出结果：</div><div class="line"><span class="number">11</span> <span class="number">14</span> <span class="number">9</span> <span class="number">16</span> <span class="number">7</span> <span class="number">19</span> <span class="number">1</span> <span class="number">9</span> <span class="number">15</span> <span class="number">5</span>  </div><div class="line">  </div><div class="line"><span class="number">1</span> <span class="number">14</span> <span class="number">11</span> <span class="number">16</span> <span class="number">9</span> <span class="number">19</span> <span class="number">7</span> <span class="number">9</span> <span class="number">15</span> <span class="number">5</span>  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">14</span> <span class="number">16</span> <span class="number">11</span> <span class="number">19</span> <span class="number">9</span> <span class="number">9</span> <span class="number">15</span> <span class="number">7</span>  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">16</span> <span class="number">14</span> <span class="number">19</span> <span class="number">11</span> <span class="number">9</span> <span class="number">15</span> <span class="number">9</span>  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">16</span> <span class="number">19</span> <span class="number">14</span> <span class="number">11</span> <span class="number">15</span> <span class="number">9</span>  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> <span class="number">19</span> <span class="number">16</span> <span class="number">14</span> <span class="number">15</span> <span class="number">11</span>  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> <span class="number">11</span> <span class="number">19</span> <span class="number">16</span> <span class="number">15</span> <span class="number">14</span>  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> <span class="number">11</span> <span class="number">14</span> <span class="number">19</span> <span class="number">16</span> <span class="number">15</span>  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> <span class="number">11</span> <span class="number">14</span> <span class="number">15</span> <span class="number">19</span> <span class="number">16</span>  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> <span class="number">11</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">19</span>  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> <span class="number">11</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">19</span>  </div><div class="line">  </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> <span class="number">11</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">19</span></div></pre></td></tr></table></figure><h2 id="选择排序的优化"><a href="#选择排序的优化" class="headerlink" title="选择排序的优化"></a>选择排序的优化</h2><p>我自己写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xiang;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 项目名：     SelectionSort2</span></div><div class="line"><span class="comment"> * 包名：       com.xiang</span></div><div class="line"><span class="comment"> * 文件名：     SelectionSort2</span></div><div class="line"><span class="comment"> * Created by ning on 2017/12/7.</span></div><div class="line"><span class="comment"> * 描述：     我自己写的选择排序的优化</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] array)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> right = array.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> minIndex,maxIndex ;</div><div class="line">        Comparable min,max;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</div><div class="line"></div><div class="line">            minIndex = left;</div><div class="line">            maxIndex = left;</div><div class="line"></div><div class="line">            max = array[maxIndex];</div><div class="line">            min = array[minIndex];</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = left ; i &lt;= right ; i++)&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (array[i].compareTo(array[minIndex]) &lt; <span class="number">0</span>)&#123;</div><div class="line"></div><div class="line">                    minIndex = i;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (array[i].compareTo(array[maxIndex]) &gt; <span class="number">0</span>)&#123;</div><div class="line"></div><div class="line">                    maxIndex = i ;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                max = array[maxIndex];</div><div class="line">                min = array[minIndex];</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            array[left] = min;</div><div class="line">            array[right] = max;</div><div class="line"></div><div class="line">            left++;</div><div class="line">            right--;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> N = <span class="number">10000</span>;</div><div class="line">        Integer arr[] = SortTestHelper.generateRandomArray(N,<span class="number">0</span>,N);</div><div class="line">        Integer arr2[] = Arrays.copyOf(arr,arr.length);</div><div class="line">        SortTestHelper.testSort(<span class="string">"com.xiang.SelectionSort2"</span>,arr);</div><div class="line">        SortTestHelper.testSort(<span class="string">"com.xiang.SelectionSort"</span>,arr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结果：</p><p>截图</p><p>bobo 老师写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xiang;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 项目名：     SelectionSort2</span></div><div class="line"><span class="comment"> * 包名：       com.xiang</span></div><div class="line"><span class="comment"> * 文件名：     Selection3</span></div><div class="line"><span class="comment"> * Created by ning on 2017/12/12.</span></div><div class="line"><span class="comment"> * 描述：     bobo 的选择排序的优化</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort3</span> </span>&#123;</div><div class="line">    <span class="comment">// 我们的算法类不允许产生任何实例</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SelectionSort3</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] arr)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = arr.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</div><div class="line">            <span class="keyword">int</span> minIndex = left;</div><div class="line">            <span class="keyword">int</span> maxIndex = right;</div><div class="line"></div><div class="line">            <span class="comment">// 在每一轮查找时, 要保证arr[minIndex] &lt;= arr[maxIndex]</span></div><div class="line">            <span class="keyword">if</span>(arr[minIndex].compareTo(arr[maxIndex]) &gt; <span class="number">0</span>)</div><div class="line">                swap(arr, minIndex, maxIndex);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = left + <span class="number">1</span> ; i &lt; right; i ++)</div><div class="line">                <span class="keyword">if</span>(arr[i].compareTo(arr[minIndex]) &lt; <span class="number">0</span>)</div><div class="line">                    minIndex = i;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(arr[i].compareTo(arr[maxIndex]) &gt; <span class="number">0</span>)</div><div class="line">                    maxIndex = i;</div><div class="line"></div><div class="line">            swap(arr, left, minIndex);</div><div class="line">            swap(arr, right, maxIndex);</div><div class="line"></div><div class="line">            left ++;</div><div class="line">            right --;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        Object t = arr[i];</div><div class="line">        arr[i] = arr[j];</div><div class="line">        arr[j] = t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试SelectionSort2</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> N = <span class="number">10000</span>;</div><div class="line">        Integer[] arr = SortTestHelper.generateRandomArray(N, <span class="number">0</span>, <span class="number">100000</span>);</div><div class="line">        SortTestHelper.testSort(<span class="string">"com.xiang.SelectionSort3"</span>, arr);</div><div class="line">        SortTestHelper.testSort(<span class="string">"com.xiang.SelectionSort2"</span>,arr);</div><div class="line">        SortTestHelper.testSort(<span class="string">"com.xiang.SelectionSort"</span>,arr);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1431794062232-2a99a5431c6c?dpr=1&amp;amp;auto=compress,format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;h=&amp;amp;q=80&amp;amp;cs=tinysrgb&amp;amp;crop=&quot; alt=&quot;nature&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java 算法与数据结构（慕课网）" scheme="http://yoursite.com/tags/Java-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E6%85%95%E8%AF%BE%E7%BD%91%EF%BC%89/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
