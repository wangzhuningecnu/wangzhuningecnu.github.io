<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java Primary Question]]></title>
    <url>%2F2017%2F10%2F08%2FJava-Primary-Question%2F</url>
    <content type="text"><![CDATA[引用数组的赋值问题元素对象为 Student 类，数组元素对象为什么不能这样声明： 123Student[] arrStudent = new Student[]&#123;&#123;"D",90&#125; , &#123;"C",100&#125; , &#123;"B",95&#125; , &#123;"A",95&#125;&#125;;Student[] arrStudent = new Student[]()&#123;&#123;"D",90&#125; , &#123;"C",100&#125; , &#123;"B",95&#125; , &#123;"A",95&#125;&#125;; Integer 的包装类就可以这样声明： 1234567891011121314151617181920212223//测试 IntegerInteger arrInteger[] = &#123;10,8,9,7,4,6,5,3,2,1&#125;;SelectionSort.selectionSort(arrInteger);for (Integer i : arrInteger )&#123; System.out.print(i + " ");&#125;System.out.println();//测试 DoubleDouble arrDouble[] = &#123;4.3,4.2,3.3,2.1,1.0&#125;;SelectionSort.selectionSort(arrDouble);for (Double double1 : arrDouble) &#123; System.out.print(double1 + " ");&#125;System.out.println();//测试 StringString[] arrString = &#123;"D","C","B","A"&#125;;SelectionSort.selectionSort(arrString);for (String string : arrString) &#123; System.out.print(string+" ");&#125;System.out.println(); 引用类型的数组不可以在声明时赋值吗？ 引用类型数组怎么定义的？]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java问题贴</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sortAlgorithm]]></title>
    <url>%2F2017%2F10%2F07%2FsortAlgorithm%2F</url>
    <content type="text"><![CDATA[最简单的 — 选择排序 选择排序：每次选择剩余元素中的最小的那个，与当前位置互换。 选择排序不能中断 选择排序动态图 选择排序示例代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class SelectionSort &#123; private SelectionSort()&#123;&#125;//此算法类不允许产生实例 public static void selectionSort(int[] arr) &#123; for (int i = 0; i &lt; arr.length; i++) &#123; //找到剩余元素（下标为 [i，arr.length)中的元素）中最小元素的下标 int min = i; for (int j = i + 1; j &lt; arr.length; j++) &#123; if (arr[j] &lt; arr[min]) &#123; min = j; &#125; &#125; swap(arr, min, i);//将选择出的最小元素与当前位置元素 arr[i] 交换 for (int n : arr) &#123; System.out.print(n +" "); &#125; System.out.println(); &#125; &#125; public static void swap(int arr[],int n,int m) &#123; int temp = arr[n]; arr[n] = arr[m]; arr[m] = temp; &#125; public static void main(String[] args) &#123; int arr[] = &#123;10,8,9,7,4,6,5,3,2,1&#125;; SelectionSort.selectionSort(arr); for (int i : arr) &#123; System.out.print(i + " "); &#125; System.out.println(); &#125;&#125;输出：1 8 9 7 4 6 5 3 2 10 1 2 9 7 4 6 5 3 8 10 1 2 3 7 4 6 5 9 8 10 1 2 3 4 7 6 5 9 8 10 1 2 3 4 5 6 7 9 8 10 1 2 3 4 5 6 7 9 8 10 1 2 3 4 5 6 7 9 8 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 加了泛型的选择排序123456789101112131415161718192021222324252627282930313233343536package com.ning;public class Student implements Comparable&lt;Student&gt;&#123; private String name; private int grade; public Student(String name,int grade) &#123; // TODO Auto-generated constructor stub this.name = name; this.grade = grade; &#125; public Student() &#123; // TODO Auto-generated constructor stub &#125; // 定义Student的compareTo函数 // 如果分数相等，则按照名字的字母序排序 // 如果分数不等，则分数高的靠前 @Override public int compareTo(Student o) &#123; // TODO Auto-generated method stub if (this.grade &gt; o.grade) &#123; return 1; &#125;else if (this.grade &lt; o.grade) &#123; return -1; &#125;else &#123; return this.name.compareTo(o.name); &#125; &#125; @Override public String toString() &#123; // TODO Auto-generated method stub return "Student: " + this.name + " " + this.grade; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596package com.ning;import java.lang.management.MemoryManagerMXBean;public class SelectionSort &#123; private SelectionSort()&#123;&#125;//算法类不允许产生实例 public static void selectionSort(Comparable[] arr) &#123; for (int i = 0; i &lt; arr.length; i++) &#123; //找到 [i，arr.length)中 最小元素的下标 int min = i; for (int j = i + 1; j &lt; arr.length; j++) &#123; //使用compareTo方法比较两个Comparable对象的大小 if (arr[j].compareTo(arr[min]) &lt; 0) &#123; min = j; &#125; &#125; swap(arr, min, i);//将选择出的最小元素与 i 交换 for (Object n : arr) &#123; System.out.print(n +" "); &#125; System.out.println(); &#125; &#125; public static void swap(Object arr[],int n,int m) &#123; Object temp = arr[n]; arr[n] = arr[m]; arr[m] = temp; &#125; public static void main(String[] args) &#123; //测试 Integer Integer arrInteger[] = &#123;10,8,9,7,4,6,5,3,2,1&#125;; SelectionSort.selectionSort(arrInteger); for (Integer i : arrInteger )&#123; System.out.print(i + " "); &#125; System.out.println(); //测试 Double Double arrDouble[] = &#123;4.3,4.2,3.3,2.1,1.0&#125;; SelectionSort.selectionSort(arrDouble); for (Double double1 : arrDouble) &#123; System.out.print(double1 + " "); &#125; System.out.println(); //测试 String String[] arrString = &#123;"D","C","B","A"&#125;; SelectionSort.selectionSort(arrString); for (String string : arrString) &#123; System.out.print(string+" "); &#125; System.out.println(); //测试自定义的 Student 类 Student[] arrStudent = new Student[3]; arrStudent[0] = new Student("wang",100); arrStudent[1] = new Student("zhang",98); arrStudent[2] = new Student("xiang",79); SelectionSort.selectionSort(arrStudent); for (Student student : arrStudent) &#123; System.out.print(student + " "); &#125; System.out.println(); &#125;&#125;输出结果：1 8 9 7 4 6 5 3 2 10 1 2 9 7 4 6 5 3 8 10 1 2 3 7 4 6 5 9 8 10 1 2 3 4 7 6 5 9 8 10 1 2 3 4 5 6 7 9 8 10 1 2 3 4 5 6 7 9 8 10 1 2 3 4 5 6 7 9 8 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1.0 4.2 3.3 2.1 4.3 1.0 2.1 3.3 4.2 4.3 1.0 2.1 3.3 4.2 4.3 1.0 2.1 3.3 4.2 4.3 1.0 2.1 3.3 4.2 4.3 1.0 2.1 3.3 4.2 4.3 A C B D A B C D A B C D A B C D A B C D Student: xiang 79 Student: zhang 98 Student: wang 100 Student: xiang 79 Student: zhang 98 Student: wang 100 Student: xiang 79 Student: zhang 98 Student: wang 100 Student: xiang 79 Student: zhang 98 Student: wang 100 随机生成算法测试用例的 SortTestHelper 类1234567891011121314151617181920212223242526package com.ning;public class SortTestHelper &#123; //SortTestHelper 不允许产生任何实例 private SortTestHelper() &#123;&#125; //生成 n 个元素的随机数组，每个随机数的范围是【randomLeft，randomRight】 public static Integer[] generateRandomArray(int n,int randomLeft,int randomRight) &#123; assert randomLeft &lt;= randomRight; Integer[] arr = new Integer[n]; for (int i = 0 ; i &lt; arr.length ; i++) &#123; arr[i] = new Integer((int)(Math.random()*(randomRight-randomLeft+1)+randomLeft));// System.out.println(arr[i]); &#125; SortTestHelper.printArray(arr); return arr; &#125; public static void printArray(Object[] arr) &#123; for (Object o : arr) &#123; System.out.print(o + " "); &#125; System.out.println(); &#125;&#125; 注意：数组赋值的时候，不能使用 foreach 写法，否则只是赋值给了局部变量，并没有赋值给数组本身。]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java 算法与数据结构（慕课网）</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TaskList：SAIC MAXUS]]></title>
    <url>%2F2017%2F10%2F04%2FTaskList%EF%BC%9ASAIC-MAXUS%2F</url>
    <content type="text"><![CDATA[数据库实现手机验证码 滚动广告搜索智能推荐购买支付语音]]></content>
      <categories>
        <category>上汽大通</category>
      </categories>
      <tags>
        <tag>上汽大通</tag>
        <tag>任务清单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Writing specifications]]></title>
    <url>%2F2017%2F10%2F02%2FWriting-specifications%2F</url>
    <content type="text"><![CDATA[摘自： stormzhang 的博客：每个人都需要的中文排版指南 空格 中英文之间需要加空格 eg. 大家可以搜索公众号 AndroidDeveloper 或者 googdev 关注我。 中文与数字之间需要加空格 eg. 不知不觉，我都快 30 岁了。 数字与单位之间需要加空格 eg. 我有一块 20 TB 的硬盘，鬼知道我是怎么用完的。 完整的英文整句时标点与单词之间需要加空格 eg. Stay hungry, stay foolish. 但是也有一些例外。 度的标志、百分号不加空格 eg. 今天气温有 30° 的高温。 eg. 据统计，关注公众号 AndroidDeveloper 的读者中有 80% 是长得好看的。 全角标点与其他字符之间不加空格 eg. 大家好，我是 stormzhang，请多多关照。 标点全角和半角是英文和中文的编码规范不同遗留下的问题，简单来说，全角占两个字节，半角占一个字节，你可以理解成中文汉字是全角，英文字母是半角，不过半角全角主要是针对标点符号来说的，中文标点占两个字节，英文标点占一个字节。体现在排版上的差异就是，全角字符屏幕打印宽度是两个，而半角字符屏幕打印宽度是一个，如中文逗号和英文逗号他们的显示分别是「，」和「,」。 使用全角中文标点 中文排版中所有的标点都应该使用中文全角中文标点 eg. 大家好，我是 stormzhang。 遇到英文整句、特殊名词时使用半角标点。 eg. 乔布斯说过：「Stay hungry, stay foolish.」 eg. Facebook, Inc. 使用直角引号 我国国家标准要求弯引号，但是个人建议在新媒体排版时使用直角引号。 eg. 你竟然不知道「帅比张」？ 如果引号再使用引号使用直角双引号。 eg. 我质问他，「你难道忘记『帅比张』了么？」 其他除以上之外，还有一些其他标准推荐大家使用的。 英文名词首字母尽量大写 eg. Google、Android、Facebook 专有名词使用正确的大小写 eg. GitHub、iOS、iPhone 6s、MacBook Pro 首行不要缩进 大家一般都采用「空出一行」进行自然段与自然段之间的区分，这种写作方式非常省事，而且很整齐。 ​]]></content>
      <categories>
        <category>stormzhang</category>
      </categories>
      <tags>
        <tag>stormzhang</tag>
        <tag>中文排版指南</tag>
        <tag>书写规范</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BookList]]></title>
    <url>%2F2017%2F09%2F30%2FBookList%2F</url>
    <content type="text"><![CDATA[过去完成时 Head First Java： 8 - 9 月 现在进行时 Android 第一行代码：10 月 Java 算法与数据结构（慕课网）：10 - 11 月 15 日，每天一小部分，你努力时，全世界都会给你让路。 Head First Java 总结：10月 。每晚补一点。 Head First 设计模式：10 - 11 月 15 日，和慕课网的视频结合着一起看。 CET - 6（10 月 - 11月 15日）：考研单词一天背一单元；一周看一次语法视频。 将来时]]></content>
      <categories>
        <category>书单</category>
      </categories>
      <tags>
        <tag>任务清单</tag>
        <tag>书单</tag>
        <tag>Head First Java</tag>
        <tag>Effective Java</tag>
        <tag>Thinking in Java</tag>
        <tag>Android 第一行代码</tag>
        <tag>Head First 设计模式</tag>
        <tag>CET - 6</tag>
        <tag>Java 算法与数据结构（慕课网）</tag>
        <tag>玩转算法面试 LeetCode 题库分门别类详细解析（慕课网）</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub + Hexo + NexT 主题 免费搭建博客-参考链接收集]]></title>
    <url>%2F2017%2F09%2F30%2FFreeBlog%EF%BC%9AGitHub-Hexo%2F</url>
    <content type="text"><![CDATA[博客搭建 GitHub 官网：https://github.com/ Hexo 官网：https://hexo.io/zh-cn/ 部署博客 NexT 主题官网：http://theme-next.iissnan.com/ 美化博客 NexT 源码地址：用于失误修改next文件夹里的文件，可以参考源码还原 最适合新手的 GitHub + Hexo 「大话」博客搭建教程 建立博客系列（三）：Hexo 安装配置 建立博客系列（四）：NexT 主题相关配置 建立博客系列（五）：发布第一篇文章 记录第一次搭建 Hexo 一些错误的解决方案 解决 Hexo 神烦的 DTraceProviderBindings MODULE_NOT_FOUND Mac 快速显示或隐藏“隐藏”文件 Mac 设置文件权限问题 博客主题 NexT 参考 Jark’s Blog 随风丶亮 主题 NexT 美化 NexT 主题里用到的所有图标 网站 icon 下载地址 NexT 主题配置及优化-动态背景等大全 Hexo 的 NexT 主题个性化教程:打造炫酷网站 NexT 主题添加腾讯空间404公益页面 Hexo 文章管理和写文章 Hexo 使用攻略：（四）Hexo 的分类和标签设置 分类和标签有什么区别和关联? Front - matter | Hexo 官网关于文章分类的解释 Markdown 官网 认识与入门 Markdown Markdown 语法手册 （完整整理版） Mac 下好用的 Markdown 编辑器– Mou Mac 下好用的 Markdown 编辑器—Typora Mac 下好用的图床工具 CloudApp（科学上网 + 软件收费 + 14天试用） 如何利用 GitHub 在 Markdown 中优雅地插入图片 Hexo-设置阅读全文 注意 修改文件之前先行备份，以防更改失败； 找不到的信息，结合官网查询。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
